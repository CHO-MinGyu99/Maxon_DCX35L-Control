
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  000013e4  00001478  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000013e4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000166  00800108  00800108  00001480  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001480  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000014b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  000014ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000148f  00000000  00000000  00001604  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a95  00000000  00000000  00002a93  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b4b  00000000  00000000  00003528  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000368  00000000  00000000  00004074  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000097d  00000000  00000000  000043dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006f3  00000000  00000000  00004d59  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  0000544c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	cc c0       	rjmp	.+408    	; 0x19e <__vector_1>
       6:	00 00       	nop
       8:	de c0       	rjmp	.+444    	; 0x1c6 <__vector_2>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	49 c0       	rjmp	.+146    	; 0xc8 <__bad_interrupt>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	d6 c0       	rjmp	.+428    	; 0x1ee <__vector_16>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	8b c0       	rjmp	.+278    	; 0x160 <__vector_18>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e4 ee       	ldi	r30, 0xE4	; 228
      a0:	f3 e1       	ldi	r31, 0x13	; 19
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a8 30       	cpi	r26, 0x08	; 8
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	22 e0       	ldi	r18, 0x02	; 2
      b4:	a8 e0       	ldi	r26, 0x08	; 8
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	ae 36       	cpi	r26, 0x6E	; 110
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	2f d5       	rcall	.+2654   	; 0xb22 <main>
      c4:	0c 94 f0 09 	jmp	0x13e0	; 0x13e0 <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <SetDutyCW>:
volatile int Set = 0;


void SetDutyCW(double v)
{
	while(TCNT1  == 0);
      ca:	2c b5       	in	r18, 0x2c	; 44
      cc:	3d b5       	in	r19, 0x2d	; 45
      ce:	23 2b       	or	r18, r19
      d0:	e1 f3       	breq	.-8      	; 0xca <SetDutyCW>

	int ocr = v * (200. / 24.) + 200;
      d2:	25 e5       	ldi	r18, 0x55	; 85
      d4:	35 e5       	ldi	r19, 0x55	; 85
      d6:	45 e0       	ldi	r20, 0x05	; 5
      d8:	51 e4       	ldi	r21, 0x41	; 65
      da:	0e 94 8d 09 	call	0x131a	; 0x131a <__mulsf3>
      de:	20 e0       	ldi	r18, 0x00	; 0
      e0:	30 e0       	ldi	r19, 0x00	; 0
      e2:	48 e4       	ldi	r20, 0x48	; 72
      e4:	53 e4       	ldi	r21, 0x43	; 67
      e6:	06 d7       	rcall	.+3596   	; 0xef4 <__addsf3>
      e8:	d5 d7       	rcall	.+4010   	; 0x1094 <__fixsfsi>
	
	if(ocr > OCR_MAX)	ocr = OCR_MAX;
      ea:	67 38       	cpi	r22, 0x87	; 135
      ec:	81 e0       	ldi	r24, 0x01	; 1
      ee:	78 07       	cpc	r23, r24
      f0:	34 f4       	brge	.+12     	; 0xfe <SetDutyCW+0x34>
	else if(ocr < OCR_MIN)	ocr = OCR_MIN;
      f2:	6a 30       	cpi	r22, 0x0A	; 10
      f4:	71 05       	cpc	r23, r1
      f6:	2c f4       	brge	.+10     	; 0x102 <SetDutyCW+0x38>
      f8:	6a e0       	ldi	r22, 0x0A	; 10
      fa:	70 e0       	ldi	r23, 0x00	; 0
      fc:	02 c0       	rjmp	.+4      	; 0x102 <SetDutyCW+0x38>
{
	while(TCNT1  == 0);

	int ocr = v * (200. / 24.) + 200;
	
	if(ocr > OCR_MAX)	ocr = OCR_MAX;
      fe:	66 e8       	ldi	r22, 0x86	; 134
     100:	71 e0       	ldi	r23, 0x01	; 1
	else if(ocr < OCR_MIN)	ocr = OCR_MIN;
	//OCR1A = OCR1B = ocr;
	
	OCR1A = OCR3B = ocr + 8;		//1 H
     102:	cb 01       	movw	r24, r22
     104:	08 96       	adiw	r24, 0x08	; 8
     106:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     10a:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     10e:	9b bd       	out	0x2b, r25	; 43
     110:	8a bd       	out	0x2a, r24	; 42
	OCR1B = OCR3A = ocr - 8;		//1 L
     112:	68 50       	subi	r22, 0x08	; 8
     114:	71 09       	sbc	r23, r1
     116:	70 93 87 00 	sts	0x0087, r23	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     11a:	60 93 86 00 	sts	0x0086, r22	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     11e:	79 bd       	out	0x29, r23	; 41
     120:	68 bd       	out	0x28, r22	; 40
     122:	08 95       	ret

00000124 <InitLS7366>:
}

void InitLS7366()
{
     124:	cf 93       	push	r28
	PORTB = 0x00;
     126:	18 ba       	out	0x18, r1	; 24
	SPI_MasterSend(SELECT_MDR0 | WR_REG);
     128:	88 e8       	ldi	r24, 0x88	; 136
     12a:	d9 d6       	rcall	.+3506   	; 0xede <SPI_MasterSend>
	SPI_MasterSend(X4_QUAD | FREE_RUN | DISABLE_INDEX | SYNCHRONOUS_INDEX |FILTER_CDF_1);
     12c:	83 e4       	ldi	r24, 0x43	; 67
     12e:	d7 d6       	rcall	.+3502   	; 0xede <SPI_MasterSend>
	PORTB = 0x01;
     130:	c1 e0       	ldi	r28, 0x01	; 1
     132:	c8 bb       	out	0x18, r28	; 24
	
	PORTB = 0x00;
	SPI_MasterSend(SELECT_MDR1 | WR_REG);
     134:	18 ba       	out	0x18, r1	; 24
     136:	80 e9       	ldi	r24, 0x90	; 144
	SPI_MasterSend(FOUR_BYTE_COUNT_MODE | ENABLE_COUNTING);
     138:	d2 d6       	rcall	.+3492   	; 0xede <SPI_MasterSend>
     13a:	80 e0       	ldi	r24, 0x00	; 0
	PORTB = 0x01;
     13c:	d0 d6       	rcall	.+3488   	; 0xede <SPI_MasterSend>
	
	PORTB = 0x00;
     13e:	c8 bb       	out	0x18, r28	; 24
	SPI_MasterSend(SELECT_CNTR | CLR_REG);
     140:	18 ba       	out	0x18, r1	; 24
     142:	80 e2       	ldi	r24, 0x20	; 32
     144:	cc d6       	rcall	.+3480   	; 0xede <SPI_MasterSend>
	PORTB = 0x01;
     146:	c8 bb       	out	0x18, r28	; 24
}
     148:	cf 91       	pop	r28
     14a:	08 95       	ret

0000014c <getADC>:

int getADC(char ch)
{
	ADMUX = (ADMUX & 0xf0) + ch;
     14c:	97 b1       	in	r25, 0x07	; 7
     14e:	90 7f       	andi	r25, 0xF0	; 240
     150:	89 0f       	add	r24, r25
     152:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= 0x40;
     154:	36 9a       	sbi	0x06, 6	; 6
	while(!(ADCSRA & 0x10));
     156:	34 9b       	sbis	0x06, 4	; 6
     158:	fe cf       	rjmp	.-4      	; 0x156 <getADC+0xa>
	return ADC;
     15a:	84 b1       	in	r24, 0x04	; 4
     15c:	95 b1       	in	r25, 0x05	; 5
}
     15e:	08 95       	ret

00000160 <__vector_18>:

ISR(USART0_RX_vect)
{
     160:	1f 92       	push	r1
     162:	0f 92       	push	r0
     164:	0f b6       	in	r0, 0x3f	; 63
     166:	0f 92       	push	r0
     168:	11 24       	eor	r1, r1
     16a:	0b b6       	in	r0, 0x3b	; 59
     16c:	0f 92       	push	r0
     16e:	8f 93       	push	r24
     170:	ef 93       	push	r30
     172:	ff 93       	push	r31
	g_buf[g_BufWriteCnt++] = UDR0;
     174:	e0 91 49 02 	lds	r30, 0x0249	; 0x800249 <g_BufWriteCnt>
     178:	81 e0       	ldi	r24, 0x01	; 1
     17a:	8e 0f       	add	r24, r30
     17c:	80 93 49 02 	sts	0x0249, r24	; 0x800249 <g_BufWriteCnt>
     180:	f0 e0       	ldi	r31, 0x00	; 0
     182:	8c b1       	in	r24, 0x0c	; 12
     184:	e7 5b       	subi	r30, 0xB7	; 183
     186:	fe 4f       	sbci	r31, 0xFE	; 254
     188:	80 83       	st	Z, r24
}
     18a:	ff 91       	pop	r31
     18c:	ef 91       	pop	r30
     18e:	8f 91       	pop	r24
     190:	0f 90       	pop	r0
     192:	0b be       	out	0x3b, r0	; 59
     194:	0f 90       	pop	r0
     196:	0f be       	out	0x3f, r0	; 63
     198:	0f 90       	pop	r0
     19a:	1f 90       	pop	r1
     19c:	18 95       	reti

0000019e <__vector_1>:
	//mode = 2;
//}

// Set test용 스위치 인터럽트
ISR(INT0_vect)
{
     19e:	1f 92       	push	r1
     1a0:	0f 92       	push	r0
     1a2:	0f b6       	in	r0, 0x3f	; 63
     1a4:	0f 92       	push	r0
     1a6:	11 24       	eor	r1, r1
     1a8:	8f 93       	push	r24
     1aa:	9f 93       	push	r25
	Set = 1;
     1ac:	81 e0       	ldi	r24, 0x01	; 1
     1ae:	90 e0       	ldi	r25, 0x00	; 0
     1b0:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <__data_end+0x1>
     1b4:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
}
     1b8:	9f 91       	pop	r25
     1ba:	8f 91       	pop	r24
     1bc:	0f 90       	pop	r0
     1be:	0f be       	out	0x3f, r0	; 63
     1c0:	0f 90       	pop	r0
     1c2:	1f 90       	pop	r1
     1c4:	18 95       	reti

000001c6 <__vector_2>:
ISR(INT1_vect)
{
     1c6:	1f 92       	push	r1
     1c8:	0f 92       	push	r0
     1ca:	0f b6       	in	r0, 0x3f	; 63
     1cc:	0f 92       	push	r0
     1ce:	11 24       	eor	r1, r1
     1d0:	8f 93       	push	r24
     1d2:	9f 93       	push	r25
	Set = 2;
     1d4:	82 e0       	ldi	r24, 0x02	; 2
     1d6:	90 e0       	ldi	r25, 0x00	; 0
     1d8:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <__data_end+0x1>
     1dc:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
}
     1e0:	9f 91       	pop	r25
     1e2:	8f 91       	pop	r24
     1e4:	0f 90       	pop	r0
     1e6:	0f be       	out	0x3f, r0	; 63
     1e8:	0f 90       	pop	r0
     1ea:	1f 90       	pop	r1
     1ec:	18 95       	reti

000001ee <__vector_16>:

///////////////////
// Control Start //
ISR(TIMER0_OVF_vect)
{	
     1ee:	1f 92       	push	r1
     1f0:	0f 92       	push	r0
     1f2:	0f b6       	in	r0, 0x3f	; 63
     1f4:	0f 92       	push	r0
     1f6:	11 24       	eor	r1, r1
     1f8:	0b b6       	in	r0, 0x3b	; 59
     1fa:	0f 92       	push	r0
     1fc:	8f 92       	push	r8
     1fe:	9f 92       	push	r9
     200:	af 92       	push	r10
     202:	bf 92       	push	r11
     204:	cf 92       	push	r12
     206:	df 92       	push	r13
     208:	ef 92       	push	r14
     20a:	ff 92       	push	r15
     20c:	2f 93       	push	r18
     20e:	3f 93       	push	r19
     210:	4f 93       	push	r20
     212:	5f 93       	push	r21
     214:	6f 93       	push	r22
     216:	7f 93       	push	r23
     218:	8f 93       	push	r24
     21a:	9f 93       	push	r25
     21c:	af 93       	push	r26
     21e:	bf 93       	push	r27
     220:	cf 93       	push	r28
     222:	ef 93       	push	r30
     224:	ff 93       	push	r31
	TCNT0 = 256 - 125;
     226:	83 e8       	ldi	r24, 0x83	; 131
     228:	82 bf       	out	0x32, r24	; 50
	//Read LS7366
	int32_t cnt;
	
	PORTC = 0x01;
     22a:	c1 e0       	ldi	r28, 0x01	; 1
     22c:	c5 bb       	out	0x15, r28	; 21
	
	g_ADC = getADC(0);
     22e:	80 e0       	ldi	r24, 0x00	; 0
     230:	8d df       	rcall	.-230    	; 0x14c <getADC>
     232:	bc 01       	movw	r22, r24
     234:	99 0f       	add	r25, r25
     236:	88 0b       	sbc	r24, r24
     238:	99 0b       	sbc	r25, r25
     23a:	5f d7       	rcall	.+3774   	; 0x10fa <__floatsisf>
     23c:	60 93 64 02 	sts	0x0264, r22	; 0x800264 <g_ADC>
     240:	70 93 65 02 	sts	0x0265, r23	; 0x800265 <g_ADC+0x1>
     244:	80 93 66 02 	sts	0x0266, r24	; 0x800266 <g_ADC+0x2>
     248:	90 93 67 02 	sts	0x0267, r25	; 0x800267 <g_ADC+0x3>
	
	PORTB = 0x00;
	SPI_MasterSend(SELECT_OTR | LOAD_REG);
     24c:	18 ba       	out	0x18, r1	; 24
     24e:	88 ee       	ldi	r24, 0xE8	; 232
     250:	46 d6       	rcall	.+3212   	; 0xede <SPI_MasterSend>
	PORTB = 0x01;
			
	PORTB = 0x00;
	SPI_MasterSend(SELECT_OTR | RD_REG);
     252:	c8 bb       	out	0x18, r28	; 24
     254:	18 ba       	out	0x18, r1	; 24
     256:	88 e6       	ldi	r24, 0x68	; 104
	cnt = SPI_MasterRecv();		cnt = cnt<< 8;
     258:	42 d6       	rcall	.+3204   	; 0xede <SPI_MasterSend>
     25a:	46 d6       	rcall	.+3212   	; 0xee8 <SPI_MasterRecv>
     25c:	c8 2e       	mov	r12, r24
     25e:	d1 2c       	mov	r13, r1
     260:	e1 2c       	mov	r14, r1
     262:	f1 2c       	mov	r15, r1
     264:	fe 2c       	mov	r15, r14
     266:	ed 2c       	mov	r14, r13
     268:	dc 2c       	mov	r13, r12
	cnt |= SPI_MasterRecv();	cnt = cnt<< 8;
     26a:	cc 24       	eor	r12, r12
     26c:	3d d6       	rcall	.+3194   	; 0xee8 <SPI_MasterRecv>
     26e:	c8 2a       	or	r12, r24
     270:	fe 2c       	mov	r15, r14
     272:	ed 2c       	mov	r14, r13
     274:	dc 2c       	mov	r13, r12
	cnt |= SPI_MasterRecv();	cnt = cnt<< 8;
     276:	cc 24       	eor	r12, r12
     278:	37 d6       	rcall	.+3182   	; 0xee8 <SPI_MasterRecv>
     27a:	c8 2a       	or	r12, r24
     27c:	fe 2c       	mov	r15, r14
     27e:	ed 2c       	mov	r14, r13
     280:	dc 2c       	mov	r13, r12
	cnt |= SPI_MasterRecv();
     282:	cc 24       	eor	r12, r12
     284:	31 d6       	rcall	.+3170   	; 0xee8 <SPI_MasterRecv>
	PORTB = 0x01;
     286:	c8 bb       	out	0x18, r28	; 24
	g_Cnt = -cnt;
     288:	c8 2a       	or	r12, r24
     28a:	f0 94       	com	r15
     28c:	e0 94       	com	r14
     28e:	d0 94       	com	r13
     290:	c0 94       	com	r12
     292:	c1 1c       	adc	r12, r1
     294:	d1 1c       	adc	r13, r1
     296:	e1 1c       	adc	r14, r1
     298:	f1 1c       	adc	r15, r1
     29a:	c0 92 45 01 	sts	0x0145, r12	; 0x800145 <g_Cnt>
     29e:	d0 92 46 01 	sts	0x0146, r13	; 0x800146 <g_Cnt+0x1>
     2a2:	e0 92 47 01 	sts	0x0147, r14	; 0x800147 <g_Cnt+0x2>
     2a6:	f0 92 48 01 	sts	0x0148, r15	; 0x800148 <g_Cnt+0x3>
	
	g_Pcur = (g_Cnt / (4096. * 81.)) * 2 * M_PI;
     2aa:	60 91 45 01 	lds	r22, 0x0145	; 0x800145 <g_Cnt>
     2ae:	70 91 46 01 	lds	r23, 0x0146	; 0x800146 <g_Cnt+0x1>
     2b2:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <g_Cnt+0x2>
     2b6:	90 91 48 01 	lds	r25, 0x0148	; 0x800148 <g_Cnt+0x3>
     2ba:	1f d7       	rcall	.+3646   	; 0x10fa <__floatsisf>
     2bc:	20 e0       	ldi	r18, 0x00	; 0
     2be:	30 e0       	ldi	r19, 0x00	; 0
     2c0:	42 ea       	ldi	r20, 0xA2	; 162
     2c2:	58 e4       	ldi	r21, 0x48	; 72
     2c4:	7f d6       	rcall	.+3326   	; 0xfc4 <__divsf3>
     2c6:	9b 01       	movw	r18, r22
     2c8:	ac 01       	movw	r20, r24
     2ca:	14 d6       	rcall	.+3112   	; 0xef4 <__addsf3>
     2cc:	2b ed       	ldi	r18, 0xDB	; 219
     2ce:	3f e0       	ldi	r19, 0x0F	; 15
     2d0:	49 e4       	ldi	r20, 0x49	; 73
     2d2:	50 e4       	ldi	r21, 0x40	; 64
     2d4:	0e 94 8d 09 	call	0x131a	; 0x131a <__mulsf3>
     2d8:	60 93 38 01 	sts	0x0138, r22	; 0x800138 <g_Pcur>
     2dc:	70 93 39 01 	sts	0x0139, r23	; 0x800139 <g_Pcur+0x1>
     2e0:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <g_Pcur+0x2>
     2e4:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <g_Pcur+0x3>
	
	PORTC = 0x03;
     2e8:	83 e0       	ldi	r24, 0x03	; 3
     2ea:	85 bb       	out	0x15, r24	; 21
	//TO DO
	
	
	//////////////////////
	// Position Control //
	if((g_TimerCnt % 100) == 0)
     2ec:	90 91 63 02 	lds	r25, 0x0263	; 0x800263 <g_TimerCnt>
     2f0:	89 e2       	ldi	r24, 0x29	; 41
     2f2:	98 9f       	mul	r25, r24
     2f4:	81 2d       	mov	r24, r1
     2f6:	11 24       	eor	r1, r1
     2f8:	82 95       	swap	r24
     2fa:	8f 70       	andi	r24, 0x0F	; 15
     2fc:	24 e6       	ldi	r18, 0x64	; 100
     2fe:	82 9f       	mul	r24, r18
     300:	90 19       	sub	r25, r0
     302:	11 24       	eor	r1, r1
     304:	91 11       	cpse	r25, r1
     306:	f2 c0       	rjmp	.+484    	; 0x4ec <__LOCK_REGION_LENGTH__+0xec>
	{
		g_TimerCnt = 0;
     308:	10 92 63 02 	sts	0x0263, r1	; 0x800263 <g_TimerCnt>
		//{
			//g_Pdes = 450 * DEG2RAD;
		//}
		
		// Joint mode
		if(mode == 2)
     30c:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <mode>
     310:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <mode+0x1>
     314:	02 97       	sbiw	r24, 0x02	; 2
     316:	09 f0       	breq	.+2      	; 0x31a <__vector_16+0x12c>
     318:	52 c0       	rjmp	.+164    	; 0x3be <__vector_16+0x1d0>
		{
			if(g_Pdes >= 360 * DEG2RAD)
     31a:	60 91 40 01 	lds	r22, 0x0140	; 0x800140 <g_Pdes>
     31e:	70 91 41 01 	lds	r23, 0x0141	; 0x800141 <g_Pdes+0x1>
     322:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <g_Pdes+0x2>
     326:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <g_Pdes+0x3>
     32a:	24 e9       	ldi	r18, 0x94	; 148
     32c:	3f e0       	ldi	r19, 0x0F	; 15
     32e:	49 ec       	ldi	r20, 0xC9	; 201
     330:	50 e4       	ldi	r21, 0x40	; 64
     332:	ef d7       	rcall	.+4062   	; 0x1312 <__gesf2>
     334:	88 23       	and	r24, r24
     336:	b4 f0       	brlt	.+44     	; 0x364 <__vector_16+0x176>
			{
				g_Pdes = fmod(g_Pdes, 360 * DEG2RAD);
     338:	60 91 40 01 	lds	r22, 0x0140	; 0x800140 <g_Pdes>
     33c:	70 91 41 01 	lds	r23, 0x0141	; 0x800141 <g_Pdes+0x1>
     340:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <g_Pdes+0x2>
     344:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <g_Pdes+0x3>
     348:	24 e9       	ldi	r18, 0x94	; 148
     34a:	3f e0       	ldi	r19, 0x0F	; 15
     34c:	49 ec       	ldi	r20, 0xC9	; 201
     34e:	50 e4       	ldi	r21, 0x40	; 64
     350:	16 d7       	rcall	.+3628   	; 0x117e <fmod>
     352:	60 93 40 01 	sts	0x0140, r22	; 0x800140 <g_Pdes>
     356:	70 93 41 01 	sts	0x0141, r23	; 0x800141 <g_Pdes+0x1>
     35a:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <g_Pdes+0x2>
     35e:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <g_Pdes+0x3>
     362:	2d c0       	rjmp	.+90     	; 0x3be <__vector_16+0x1d0>
				//g_Pdes -= 360 * DEG2RAD;
			}
			else if(g_Pdes < 0)
     364:	60 91 40 01 	lds	r22, 0x0140	; 0x800140 <g_Pdes>
     368:	70 91 41 01 	lds	r23, 0x0141	; 0x800141 <g_Pdes+0x1>
     36c:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <g_Pdes+0x2>
     370:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <g_Pdes+0x3>
     374:	20 e0       	ldi	r18, 0x00	; 0
     376:	30 e0       	ldi	r19, 0x00	; 0
     378:	a9 01       	movw	r20, r18
     37a:	20 d6       	rcall	.+3136   	; 0xfbc <__cmpsf2>
     37c:	88 23       	and	r24, r24
     37e:	fc f4       	brge	.+62     	; 0x3be <__vector_16+0x1d0>
     380:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <g_Pdes>
			{
				g_Pdes = (-fmod(-g_Pdes, 360 * DEG2RAD) + 360 * DEG2RAD);
     384:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <g_Pdes+0x1>
     388:	a0 91 42 01 	lds	r26, 0x0142	; 0x800142 <g_Pdes+0x2>
     38c:	b0 91 43 01 	lds	r27, 0x0143	; 0x800143 <g_Pdes+0x3>
     390:	bc 01       	movw	r22, r24
     392:	cd 01       	movw	r24, r26
     394:	90 58       	subi	r25, 0x80	; 128
     396:	24 e9       	ldi	r18, 0x94	; 148
     398:	3f e0       	ldi	r19, 0x0F	; 15
     39a:	49 ec       	ldi	r20, 0xC9	; 201
     39c:	50 e4       	ldi	r21, 0x40	; 64
     39e:	ef d6       	rcall	.+3550   	; 0x117e <fmod>
     3a0:	9b 01       	movw	r18, r22
     3a2:	ac 01       	movw	r20, r24
     3a4:	64 e9       	ldi	r22, 0x94	; 148
     3a6:	7f e0       	ldi	r23, 0x0F	; 15
     3a8:	89 ec       	ldi	r24, 0xC9	; 201
     3aa:	90 e4       	ldi	r25, 0x40	; 64
     3ac:	a2 d5       	rcall	.+2884   	; 0xef2 <__subsf3>
     3ae:	60 93 40 01 	sts	0x0140, r22	; 0x800140 <g_Pdes>
     3b2:	70 93 41 01 	sts	0x0141, r23	; 0x800141 <g_Pdes+0x1>
     3b6:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <g_Pdes+0x2>
     3ba:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <g_Pdes+0x3>
     3be:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <g_Perr>
		}
		// 회전 방향 전환
		//g_Pdes = -1*g_Pdes;
		
		// D제어를 위한 previous Error 저장
		g_Pperr = g_Perr;
     3c2:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <g_Perr+0x1>
     3c6:	a0 91 36 01 	lds	r26, 0x0136	; 0x800136 <g_Perr+0x2>
     3ca:	b0 91 37 01 	lds	r27, 0x0137	; 0x800137 <g_Perr+0x3>
     3ce:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <g_Pperr>
     3d2:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <g_Pperr+0x1>
     3d6:	a0 93 32 01 	sts	0x0132, r26	; 0x800132 <g_Pperr+0x2>
     3da:	b0 93 33 01 	sts	0x0133, r27	; 0x800133 <g_Pperr+0x3>
     3de:	60 91 40 01 	lds	r22, 0x0140	; 0x800140 <g_Pdes>
		
		// Error 저장
		g_Perr = g_Pdes - g_Pcur;
     3e2:	70 91 41 01 	lds	r23, 0x0141	; 0x800141 <g_Pdes+0x1>
     3e6:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <g_Pdes+0x2>
     3ea:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <g_Pdes+0x3>
     3ee:	20 91 38 01 	lds	r18, 0x0138	; 0x800138 <g_Pcur>
     3f2:	30 91 39 01 	lds	r19, 0x0139	; 0x800139 <g_Pcur+0x1>
     3f6:	40 91 3a 01 	lds	r20, 0x013A	; 0x80013a <g_Pcur+0x2>
     3fa:	50 91 3b 01 	lds	r21, 0x013B	; 0x80013b <g_Pcur+0x3>
     3fe:	79 d5       	rcall	.+2802   	; 0xef2 <__subsf3>
     400:	60 93 34 01 	sts	0x0134, r22	; 0x800134 <g_Perr>
     404:	70 93 35 01 	sts	0x0135, r23	; 0x800135 <g_Perr+0x1>
     408:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <g_Perr+0x2>
     40c:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <g_Perr+0x3>
     410:	c0 90 34 01 	lds	r12, 0x0134	; 0x800134 <g_Perr>
		
		// Position Control output = Speed value
		g_pos_control = Kp_p * g_Perr + Kd_p * ((g_Perr - g_Pperr) / dt_pos);
     414:	d0 90 35 01 	lds	r13, 0x0135	; 0x800135 <g_Perr+0x1>
     418:	e0 90 36 01 	lds	r14, 0x0136	; 0x800136 <g_Perr+0x2>
     41c:	f0 90 37 01 	lds	r15, 0x0137	; 0x800137 <g_Perr+0x3>
     420:	60 91 34 01 	lds	r22, 0x0134	; 0x800134 <g_Perr>
     424:	70 91 35 01 	lds	r23, 0x0135	; 0x800135 <g_Perr+0x1>
     428:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <g_Perr+0x2>
     42c:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <g_Perr+0x3>
     430:	20 91 30 01 	lds	r18, 0x0130	; 0x800130 <g_Pperr>
     434:	30 91 31 01 	lds	r19, 0x0131	; 0x800131 <g_Pperr+0x1>
     438:	40 91 32 01 	lds	r20, 0x0132	; 0x800132 <g_Pperr+0x2>
     43c:	50 91 33 01 	lds	r21, 0x0133	; 0x800133 <g_Pperr+0x3>
     440:	58 d5       	rcall	.+2736   	; 0xef2 <__subsf3>
     442:	2d ec       	ldi	r18, 0xCD	; 205
     444:	3c ec       	ldi	r19, 0xCC	; 204
     446:	4c e4       	ldi	r20, 0x4C	; 76
     448:	5d e3       	ldi	r21, 0x3D	; 61
     44a:	bc d5       	rcall	.+2936   	; 0xfc4 <__divsf3>
     44c:	2d ec       	ldi	r18, 0xCD	; 205
     44e:	3c ec       	ldi	r19, 0xCC	; 204
     450:	4c e4       	ldi	r20, 0x4C	; 76
     452:	5f e3       	ldi	r21, 0x3F	; 63
     454:	62 d7       	rcall	.+3780   	; 0x131a <__mulsf3>
     456:	4b 01       	movw	r8, r22
     458:	5c 01       	movw	r10, r24
     45a:	a7 01       	movw	r20, r14
     45c:	96 01       	movw	r18, r12
     45e:	c7 01       	movw	r24, r14
     460:	b6 01       	movw	r22, r12
     462:	48 d5       	rcall	.+2704   	; 0xef4 <__addsf3>
     464:	9b 01       	movw	r18, r22
     466:	ac 01       	movw	r20, r24
     468:	c5 01       	movw	r24, r10
     46a:	b4 01       	movw	r22, r8
     46c:	43 d5       	rcall	.+2694   	; 0xef4 <__addsf3>
     46e:	60 93 68 02 	sts	0x0268, r22	; 0x800268 <g_pos_control>
     472:	70 93 69 02 	sts	0x0269, r23	; 0x800269 <g_pos_control+0x1>
     476:	80 93 6a 02 	sts	0x026A, r24	; 0x80026a <g_pos_control+0x2>
     47a:	90 93 6b 02 	sts	0x026B, r25	; 0x80026b <g_pos_control+0x3>
		
		// Saturation
		if(g_pos_control > 642.65/81.) g_pos_control = 642.65/81.;
     47e:	60 91 68 02 	lds	r22, 0x0268	; 0x800268 <g_pos_control>
     482:	70 91 69 02 	lds	r23, 0x0269	; 0x800269 <g_pos_control+0x1>
     486:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <g_pos_control+0x2>
     48a:	90 91 6b 02 	lds	r25, 0x026B	; 0x80026b <g_pos_control+0x3>
     48e:	2d ee       	ldi	r18, 0xED	; 237
     490:	32 ee       	ldi	r19, 0xE2	; 226
     492:	4d ef       	ldi	r20, 0xFD	; 253
     494:	50 e4       	ldi	r21, 0x40	; 64
     496:	3d d7       	rcall	.+3706   	; 0x1312 <__gesf2>
     498:	18 16       	cp	r1, r24
     49a:	6c f4       	brge	.+26     	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
     49c:	8d ee       	ldi	r24, 0xED	; 237
     49e:	92 ee       	ldi	r25, 0xE2	; 226
     4a0:	ad ef       	ldi	r26, 0xFD	; 253
     4a2:	b0 e4       	ldi	r27, 0x40	; 64
     4a4:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <g_pos_control>
     4a8:	90 93 69 02 	sts	0x0269, r25	; 0x800269 <g_pos_control+0x1>
     4ac:	a0 93 6a 02 	sts	0x026A, r26	; 0x80026a <g_pos_control+0x2>
     4b0:	b0 93 6b 02 	sts	0x026B, r27	; 0x80026b <g_pos_control+0x3>
     4b4:	1b c0       	rjmp	.+54     	; 0x4ec <__LOCK_REGION_LENGTH__+0xec>
		else if(g_pos_control < -642.65/81.) g_pos_control = -642.65/81.;
     4b6:	60 91 68 02 	lds	r22, 0x0268	; 0x800268 <g_pos_control>
     4ba:	70 91 69 02 	lds	r23, 0x0269	; 0x800269 <g_pos_control+0x1>
     4be:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <g_pos_control+0x2>
     4c2:	90 91 6b 02 	lds	r25, 0x026B	; 0x80026b <g_pos_control+0x3>
     4c6:	2d ee       	ldi	r18, 0xED	; 237
     4c8:	32 ee       	ldi	r19, 0xE2	; 226
     4ca:	4d ef       	ldi	r20, 0xFD	; 253
     4cc:	50 ec       	ldi	r21, 0xC0	; 192
     4ce:	76 d5       	rcall	.+2796   	; 0xfbc <__cmpsf2>
     4d0:	88 23       	and	r24, r24
     4d2:	64 f4       	brge	.+24     	; 0x4ec <__LOCK_REGION_LENGTH__+0xec>
     4d4:	8d ee       	ldi	r24, 0xED	; 237
     4d6:	92 ee       	ldi	r25, 0xE2	; 226
     4d8:	ad ef       	ldi	r26, 0xFD	; 253
     4da:	b0 ec       	ldi	r27, 0xC0	; 192
     4dc:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <g_pos_control>
     4e0:	90 93 69 02 	sts	0x0269, r25	; 0x800269 <g_pos_control+0x1>
     4e4:	a0 93 6a 02 	sts	0x026A, r26	; 0x80026a <g_pos_control+0x2>
     4e8:	b0 93 6b 02 	sts	0x026B, r27	; 0x80026b <g_pos_control+0x3>
     4ec:	20 91 63 02 	lds	r18, 0x0263	; 0x800263 <g_TimerCnt>
	}
	
	
	///////////////////
	// Speed Control //
	if((g_TimerCnt % 10) == 0)
     4f0:	8d ec       	ldi	r24, 0xCD	; 205
     4f2:	28 9f       	mul	r18, r24
     4f4:	81 2d       	mov	r24, r1
     4f6:	11 24       	eor	r1, r1
     4f8:	86 95       	lsr	r24
     4fa:	86 95       	lsr	r24
     4fc:	86 95       	lsr	r24
     4fe:	88 0f       	add	r24, r24
     500:	98 2f       	mov	r25, r24
     502:	99 0f       	add	r25, r25
     504:	99 0f       	add	r25, r25
     506:	89 0f       	add	r24, r25
     508:	28 13       	cpse	r18, r24
     50a:	70 c1       	rjmp	.+736    	; 0x7ec <__LOCK_REGION_LENGTH__+0x3ec>
     50c:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <g_pos_control>
	{
		// Reference
		g_Vdes = g_pos_control;
     510:	90 91 69 02 	lds	r25, 0x0269	; 0x800269 <g_pos_control+0x1>
     514:	a0 91 6a 02 	lds	r26, 0x026A	; 0x80026a <g_pos_control+0x2>
     518:	b0 91 6b 02 	lds	r27, 0x026B	; 0x80026b <g_pos_control+0x3>
     51c:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <g_Vdes>
     520:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <g_Vdes+0x1>
     524:	a0 93 2e 01 	sts	0x012E, r26	; 0x80012e <g_Vdes+0x2>
     528:	b0 93 2f 01 	sts	0x012F, r27	; 0x80012f <g_Vdes+0x3>
		//g_Vdes = 1.5;
		
		// MFC Saturation
		if(g_Vdes > g_Vlimit) g_Vdes = g_Vlimit;
     52c:	60 91 2c 01 	lds	r22, 0x012C	; 0x80012c <g_Vdes>
     530:	70 91 2d 01 	lds	r23, 0x012D	; 0x80012d <g_Vdes+0x1>
     534:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <g_Vdes+0x2>
     538:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <g_Vdes+0x3>
     53c:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <g_Vlimit>
     540:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <g_Vlimit+0x1>
     544:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <g_Vlimit+0x2>
     548:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <g_Vlimit+0x3>
     54c:	e2 d6       	rcall	.+3524   	; 0x1312 <__gesf2>
     54e:	18 16       	cp	r1, r24
     550:	8c f4       	brge	.+34     	; 0x574 <__LOCK_REGION_LENGTH__+0x174>
     552:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <g_Vlimit>
     556:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <g_Vlimit+0x1>
     55a:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <g_Vlimit+0x2>
     55e:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <g_Vlimit+0x3>
     562:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <g_Vdes>
     566:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <g_Vdes+0x1>
     56a:	a0 93 2e 01 	sts	0x012E, r26	; 0x80012e <g_Vdes+0x2>
     56e:	b0 93 2f 01 	sts	0x012F, r27	; 0x80012f <g_Vdes+0x3>
     572:	27 c0       	rjmp	.+78     	; 0x5c2 <__LOCK_REGION_LENGTH__+0x1c2>
		else if(g_Vdes < -g_Vlimit) g_Vdes = - g_Vlimit;
     574:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <g_Vlimit>
     578:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <g_Vlimit+0x1>
     57c:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <g_Vlimit+0x2>
     580:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <g_Vlimit+0x3>
     584:	20 91 2c 01 	lds	r18, 0x012C	; 0x80012c <g_Vdes>
     588:	30 91 2d 01 	lds	r19, 0x012D	; 0x80012d <g_Vdes+0x1>
     58c:	40 91 2e 01 	lds	r20, 0x012E	; 0x80012e <g_Vdes+0x2>
     590:	50 91 2f 01 	lds	r21, 0x012F	; 0x80012f <g_Vdes+0x3>
     594:	bc 01       	movw	r22, r24
     596:	cd 01       	movw	r24, r26
     598:	90 58       	subi	r25, 0x80	; 128
     59a:	bb d6       	rcall	.+3446   	; 0x1312 <__gesf2>
     59c:	18 16       	cp	r1, r24
     59e:	8c f4       	brge	.+34     	; 0x5c2 <__LOCK_REGION_LENGTH__+0x1c2>
     5a0:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <g_Vlimit>
     5a4:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <g_Vlimit+0x1>
     5a8:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <g_Vlimit+0x2>
     5ac:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <g_Vlimit+0x3>
     5b0:	b0 58       	subi	r27, 0x80	; 128
     5b2:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <g_Vdes>
     5b6:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <g_Vdes+0x1>
     5ba:	a0 93 2e 01 	sts	0x012E, r26	; 0x80012e <g_Vdes+0x2>
     5be:	b0 93 2f 01 	sts	0x012F, r27	; 0x80012f <g_Vdes+0x3>
		
		// 현재 속도, 이전 속도 저장
		g_Vcur = (g_Pcur - g_Ppre) / 0.005;
     5c2:	60 91 38 01 	lds	r22, 0x0138	; 0x800138 <g_Pcur>
     5c6:	70 91 39 01 	lds	r23, 0x0139	; 0x800139 <g_Pcur+0x1>
     5ca:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <g_Pcur+0x2>
     5ce:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <g_Pcur+0x3>
     5d2:	20 91 3c 01 	lds	r18, 0x013C	; 0x80013c <g_Ppre>
     5d6:	30 91 3d 01 	lds	r19, 0x013D	; 0x80013d <g_Ppre+0x1>
     5da:	40 91 3e 01 	lds	r20, 0x013E	; 0x80013e <g_Ppre+0x2>
     5de:	50 91 3f 01 	lds	r21, 0x013F	; 0x80013f <g_Ppre+0x3>
     5e2:	87 d4       	rcall	.+2318   	; 0xef2 <__subsf3>
     5e4:	2a e0       	ldi	r18, 0x0A	; 10
     5e6:	37 ed       	ldi	r19, 0xD7	; 215
     5e8:	43 ea       	ldi	r20, 0xA3	; 163
     5ea:	5b e3       	ldi	r21, 0x3B	; 59
     5ec:	eb d4       	rcall	.+2518   	; 0xfc4 <__divsf3>
     5ee:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <g_Vcur>
     5f2:	70 93 29 01 	sts	0x0129, r23	; 0x800129 <g_Vcur+0x1>
     5f6:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <g_Vcur+0x2>
     5fa:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <g_Vcur+0x3>
     5fe:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <g_Pcur>
		g_Ppre = g_Pcur;
     602:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <g_Pcur+0x1>
     606:	a0 91 3a 01 	lds	r26, 0x013A	; 0x80013a <g_Pcur+0x2>
     60a:	b0 91 3b 01 	lds	r27, 0x013B	; 0x80013b <g_Pcur+0x3>
     60e:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <g_Ppre>
     612:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <g_Ppre+0x1>
     616:	a0 93 3e 01 	sts	0x013E, r26	; 0x80013e <g_Ppre+0x2>
     61a:	b0 93 3f 01 	sts	0x013F, r27	; 0x80013f <g_Ppre+0x3>
		
		// Error, Error sum 저장
		g_Verr = g_Vdes - g_Vcur;
     61e:	60 91 2c 01 	lds	r22, 0x012C	; 0x80012c <g_Vdes>
     622:	70 91 2d 01 	lds	r23, 0x012D	; 0x80012d <g_Vdes+0x1>
     626:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <g_Vdes+0x2>
     62a:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <g_Vdes+0x3>
     62e:	20 91 28 01 	lds	r18, 0x0128	; 0x800128 <g_Vcur>
     632:	30 91 29 01 	lds	r19, 0x0129	; 0x800129 <g_Vcur+0x1>
     636:	40 91 2a 01 	lds	r20, 0x012A	; 0x80012a <g_Vcur+0x2>
     63a:	50 91 2b 01 	lds	r21, 0x012B	; 0x80012b <g_Vcur+0x3>
     63e:	59 d4       	rcall	.+2226   	; 0xef2 <__subsf3>
     640:	60 93 24 01 	sts	0x0124, r22	; 0x800124 <g_Verr>
     644:	70 93 25 01 	sts	0x0125, r23	; 0x800125 <g_Verr+0x1>
     648:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <g_Verr+0x2>
     64c:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <g_Verr+0x3>
		g_Verr_sum += g_Verr;
     650:	60 91 24 01 	lds	r22, 0x0124	; 0x800124 <g_Verr>
     654:	70 91 25 01 	lds	r23, 0x0125	; 0x800125 <g_Verr+0x1>
     658:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <g_Verr+0x2>
     65c:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <g_Verr+0x3>
     660:	20 91 20 01 	lds	r18, 0x0120	; 0x800120 <g_Verr_sum>
     664:	30 91 21 01 	lds	r19, 0x0121	; 0x800121 <g_Verr_sum+0x1>
     668:	40 91 22 01 	lds	r20, 0x0122	; 0x800122 <g_Verr_sum+0x2>
     66c:	50 91 23 01 	lds	r21, 0x0123	; 0x800123 <g_Verr_sum+0x3>
     670:	41 d4       	rcall	.+2178   	; 0xef4 <__addsf3>
     672:	60 93 20 01 	sts	0x0120, r22	; 0x800120 <g_Verr_sum>
     676:	70 93 21 01 	sts	0x0121, r23	; 0x800121 <g_Verr_sum+0x1>
     67a:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <g_Verr_sum+0x2>
     67e:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <g_Verr_sum+0x3>
		
		// Speed Control output = Current value
		g_vel_control = Kp_s * g_Verr + Ki_s * g_Verr_sum * dt_vel;
     682:	80 90 24 01 	lds	r8, 0x0124	; 0x800124 <g_Verr>
     686:	90 90 25 01 	lds	r9, 0x0125	; 0x800125 <g_Verr+0x1>
     68a:	a0 90 26 01 	lds	r10, 0x0126	; 0x800126 <g_Verr+0x2>
     68e:	b0 90 27 01 	lds	r11, 0x0127	; 0x800127 <g_Verr+0x3>
     692:	60 91 20 01 	lds	r22, 0x0120	; 0x800120 <g_Verr_sum>
     696:	70 91 21 01 	lds	r23, 0x0121	; 0x800121 <g_Verr_sum+0x1>
     69a:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <g_Verr_sum+0x2>
     69e:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <g_Verr_sum+0x3>
     6a2:	2b ec       	ldi	r18, 0xCB	; 203
     6a4:	31 ea       	ldi	r19, 0xA1	; 161
     6a6:	46 e2       	ldi	r20, 0x26	; 38
     6a8:	52 e4       	ldi	r21, 0x42	; 66
     6aa:	37 d6       	rcall	.+3182   	; 0x131a <__mulsf3>
     6ac:	2a e0       	ldi	r18, 0x0A	; 10
     6ae:	37 ed       	ldi	r19, 0xD7	; 215
     6b0:	43 ea       	ldi	r20, 0xA3	; 163
     6b2:	5b e3       	ldi	r21, 0x3B	; 59
     6b4:	32 d6       	rcall	.+3172   	; 0x131a <__mulsf3>
     6b6:	6b 01       	movw	r12, r22
     6b8:	7c 01       	movw	r14, r24
     6ba:	27 ed       	ldi	r18, 0xD7	; 215
     6bc:	33 ea       	ldi	r19, 0xA3	; 163
     6be:	40 ec       	ldi	r20, 0xC0	; 192
     6c0:	5f e3       	ldi	r21, 0x3F	; 63
     6c2:	c5 01       	movw	r24, r10
     6c4:	b4 01       	movw	r22, r8
     6c6:	29 d6       	rcall	.+3154   	; 0x131a <__mulsf3>
     6c8:	9b 01       	movw	r18, r22
     6ca:	ac 01       	movw	r20, r24
     6cc:	c7 01       	movw	r24, r14
     6ce:	b6 01       	movw	r22, r12
     6d0:	11 d4       	rcall	.+2082   	; 0xef4 <__addsf3>
     6d2:	60 93 5f 02 	sts	0x025F, r22	; 0x80025f <g_vel_control>
     6d6:	70 93 60 02 	sts	0x0260, r23	; 0x800260 <g_vel_control+0x1>
     6da:	80 93 61 02 	sts	0x0261, r24	; 0x800261 <g_vel_control+0x2>
     6de:	90 93 62 02 	sts	0x0262, r25	; 0x800262 <g_vel_control+0x3>
		
		// Current Saturation & Anti wind-up
		if(g_vel_control > 2.08)
     6e2:	60 91 5f 02 	lds	r22, 0x025F	; 0x80025f <g_vel_control>
     6e6:	70 91 60 02 	lds	r23, 0x0260	; 0x800260 <g_vel_control+0x1>
     6ea:	80 91 61 02 	lds	r24, 0x0261	; 0x800261 <g_vel_control+0x2>
     6ee:	90 91 62 02 	lds	r25, 0x0262	; 0x800262 <g_vel_control+0x3>
     6f2:	28 eb       	ldi	r18, 0xB8	; 184
     6f4:	3e e1       	ldi	r19, 0x1E	; 30
     6f6:	45 e0       	ldi	r20, 0x05	; 5
     6f8:	50 e4       	ldi	r21, 0x40	; 64
     6fa:	0b d6       	rcall	.+3094   	; 0x1312 <__gesf2>
		{
			g_Verr_sum -= (g_vel_control - 2.08) * Ka_s;
     6fc:	18 16       	cp	r1, r24
     6fe:	a4 f5       	brge	.+104    	; 0x768 <__LOCK_REGION_LENGTH__+0x368>
     700:	60 91 5f 02 	lds	r22, 0x025F	; 0x80025f <g_vel_control>
     704:	70 91 60 02 	lds	r23, 0x0260	; 0x800260 <g_vel_control+0x1>
     708:	80 91 61 02 	lds	r24, 0x0261	; 0x800261 <g_vel_control+0x2>
     70c:	90 91 62 02 	lds	r25, 0x0262	; 0x800262 <g_vel_control+0x3>
     710:	c0 90 20 01 	lds	r12, 0x0120	; 0x800120 <g_Verr_sum>
     714:	d0 90 21 01 	lds	r13, 0x0121	; 0x800121 <g_Verr_sum+0x1>
     718:	e0 90 22 01 	lds	r14, 0x0122	; 0x800122 <g_Verr_sum+0x2>
     71c:	f0 90 23 01 	lds	r15, 0x0123	; 0x800123 <g_Verr_sum+0x3>
     720:	28 eb       	ldi	r18, 0xB8	; 184
     722:	3e e1       	ldi	r19, 0x1E	; 30
     724:	45 e0       	ldi	r20, 0x05	; 5
     726:	50 e4       	ldi	r21, 0x40	; 64
     728:	e4 d3       	rcall	.+1992   	; 0xef2 <__subsf3>
     72a:	22 e3       	ldi	r18, 0x32	; 50
     72c:	36 ee       	ldi	r19, 0xE6	; 230
     72e:	46 e7       	ldi	r20, 0x76	; 118
     730:	5f e3       	ldi	r21, 0x3F	; 63
     732:	f3 d5       	rcall	.+3046   	; 0x131a <__mulsf3>
     734:	9b 01       	movw	r18, r22
     736:	ac 01       	movw	r20, r24
     738:	c7 01       	movw	r24, r14
     73a:	b6 01       	movw	r22, r12
     73c:	da d3       	rcall	.+1972   	; 0xef2 <__subsf3>
     73e:	60 93 20 01 	sts	0x0120, r22	; 0x800120 <g_Verr_sum>
     742:	70 93 21 01 	sts	0x0121, r23	; 0x800121 <g_Verr_sum+0x1>
     746:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <g_Verr_sum+0x2>
     74a:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <g_Verr_sum+0x3>
			g_vel_control = 2.08;
     74e:	88 eb       	ldi	r24, 0xB8	; 184
     750:	9e e1       	ldi	r25, 0x1E	; 30
     752:	a5 e0       	ldi	r26, 0x05	; 5
     754:	b0 e4       	ldi	r27, 0x40	; 64
     756:	80 93 5f 02 	sts	0x025F, r24	; 0x80025f <g_vel_control>
     75a:	90 93 60 02 	sts	0x0260, r25	; 0x800260 <g_vel_control+0x1>
     75e:	a0 93 61 02 	sts	0x0261, r26	; 0x800261 <g_vel_control+0x2>
     762:	b0 93 62 02 	sts	0x0262, r27	; 0x800262 <g_vel_control+0x3>
		}
		else if(g_vel_control < -2.08)
     766:	42 c0       	rjmp	.+132    	; 0x7ec <__LOCK_REGION_LENGTH__+0x3ec>
     768:	60 91 5f 02 	lds	r22, 0x025F	; 0x80025f <g_vel_control>
     76c:	70 91 60 02 	lds	r23, 0x0260	; 0x800260 <g_vel_control+0x1>
     770:	80 91 61 02 	lds	r24, 0x0261	; 0x800261 <g_vel_control+0x2>
     774:	90 91 62 02 	lds	r25, 0x0262	; 0x800262 <g_vel_control+0x3>
     778:	28 eb       	ldi	r18, 0xB8	; 184
     77a:	3e e1       	ldi	r19, 0x1E	; 30
     77c:	45 e0       	ldi	r20, 0x05	; 5
     77e:	50 ec       	ldi	r21, 0xC0	; 192
     780:	1d d4       	rcall	.+2106   	; 0xfbc <__cmpsf2>
		{
			g_Verr_sum -= (g_vel_control + 2.08) * Ka_s;
     782:	88 23       	and	r24, r24
     784:	9c f5       	brge	.+102    	; 0x7ec <__LOCK_REGION_LENGTH__+0x3ec>
     786:	60 91 5f 02 	lds	r22, 0x025F	; 0x80025f <g_vel_control>
     78a:	70 91 60 02 	lds	r23, 0x0260	; 0x800260 <g_vel_control+0x1>
     78e:	80 91 61 02 	lds	r24, 0x0261	; 0x800261 <g_vel_control+0x2>
     792:	90 91 62 02 	lds	r25, 0x0262	; 0x800262 <g_vel_control+0x3>
     796:	c0 90 20 01 	lds	r12, 0x0120	; 0x800120 <g_Verr_sum>
     79a:	d0 90 21 01 	lds	r13, 0x0121	; 0x800121 <g_Verr_sum+0x1>
     79e:	e0 90 22 01 	lds	r14, 0x0122	; 0x800122 <g_Verr_sum+0x2>
     7a2:	f0 90 23 01 	lds	r15, 0x0123	; 0x800123 <g_Verr_sum+0x3>
     7a6:	28 eb       	ldi	r18, 0xB8	; 184
     7a8:	3e e1       	ldi	r19, 0x1E	; 30
     7aa:	45 e0       	ldi	r20, 0x05	; 5
     7ac:	50 e4       	ldi	r21, 0x40	; 64
     7ae:	a2 d3       	rcall	.+1860   	; 0xef4 <__addsf3>
     7b0:	22 e3       	ldi	r18, 0x32	; 50
     7b2:	36 ee       	ldi	r19, 0xE6	; 230
     7b4:	46 e7       	ldi	r20, 0x76	; 118
     7b6:	5f e3       	ldi	r21, 0x3F	; 63
     7b8:	b0 d5       	rcall	.+2912   	; 0x131a <__mulsf3>
     7ba:	9b 01       	movw	r18, r22
     7bc:	ac 01       	movw	r20, r24
     7be:	c7 01       	movw	r24, r14
     7c0:	b6 01       	movw	r22, r12
     7c2:	97 d3       	rcall	.+1838   	; 0xef2 <__subsf3>
     7c4:	60 93 20 01 	sts	0x0120, r22	; 0x800120 <g_Verr_sum>
     7c8:	70 93 21 01 	sts	0x0121, r23	; 0x800121 <g_Verr_sum+0x1>
     7cc:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <g_Verr_sum+0x2>
     7d0:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <g_Verr_sum+0x3>
     7d4:	88 eb       	ldi	r24, 0xB8	; 184
			g_vel_control = -2.08;
     7d6:	9e e1       	ldi	r25, 0x1E	; 30
     7d8:	a5 e0       	ldi	r26, 0x05	; 5
     7da:	b0 ec       	ldi	r27, 0xC0	; 192
     7dc:	80 93 5f 02 	sts	0x025F, r24	; 0x80025f <g_vel_control>
     7e0:	90 93 60 02 	sts	0x0260, r25	; 0x800260 <g_vel_control+0x1>
     7e4:	a0 93 61 02 	sts	0x0261, r26	; 0x800261 <g_vel_control+0x2>
     7e8:	b0 93 62 02 	sts	0x0262, r27	; 0x800262 <g_vel_control+0x3>
	
	/////////////////////
	// Current Control //
	
	// Reference
	g_Cdes = g_vel_control;
     7ec:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <g_vel_control>
     7f0:	90 91 60 02 	lds	r25, 0x0260	; 0x800260 <g_vel_control+0x1>
     7f4:	a0 91 61 02 	lds	r26, 0x0261	; 0x800261 <g_vel_control+0x2>
     7f8:	b0 91 62 02 	lds	r27, 0x0262	; 0x800262 <g_vel_control+0x3>
     7fc:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <g_Cdes>
     800:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <g_Cdes+0x1>
     804:	a0 93 1e 01 	sts	0x011E, r26	; 0x80011e <g_Cdes+0x2>
     808:	b0 93 1f 01 	sts	0x011F, r27	; 0x80011f <g_Cdes+0x3>
	
	// MFC Saturation
	if(g_Cdes > g_Climit) g_Cdes = g_Climit;
     80c:	60 91 1c 01 	lds	r22, 0x011C	; 0x80011c <g_Cdes>
     810:	70 91 1d 01 	lds	r23, 0x011D	; 0x80011d <g_Cdes+0x1>
     814:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <g_Cdes+0x2>
     818:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <g_Cdes+0x3>
     81c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     820:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     824:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     828:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     82c:	72 d5       	rcall	.+2788   	; 0x1312 <__gesf2>
     82e:	18 16       	cp	r1, r24
     830:	8c f4       	brge	.+34     	; 0x854 <__LOCK_REGION_LENGTH__+0x454>
     832:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     836:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     83a:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     83e:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     842:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <g_Cdes>
     846:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <g_Cdes+0x1>
     84a:	a0 93 1e 01 	sts	0x011E, r26	; 0x80011e <g_Cdes+0x2>
     84e:	b0 93 1f 01 	sts	0x011F, r27	; 0x80011f <g_Cdes+0x3>
     852:	27 c0       	rjmp	.+78     	; 0x8a2 <__LOCK_REGION_LENGTH__+0x4a2>
	else if(g_Cdes < - g_Climit) g_Cdes = -g_Climit;
     854:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     858:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     85c:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     860:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     864:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <g_Cdes>
     868:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <g_Cdes+0x1>
     86c:	40 91 1e 01 	lds	r20, 0x011E	; 0x80011e <g_Cdes+0x2>
     870:	50 91 1f 01 	lds	r21, 0x011F	; 0x80011f <g_Cdes+0x3>
     874:	bc 01       	movw	r22, r24
     876:	cd 01       	movw	r24, r26
     878:	90 58       	subi	r25, 0x80	; 128
     87a:	4b d5       	rcall	.+2710   	; 0x1312 <__gesf2>
     87c:	18 16       	cp	r1, r24
     87e:	8c f4       	brge	.+34     	; 0x8a2 <__LOCK_REGION_LENGTH__+0x4a2>
     880:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     884:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     888:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     88c:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     890:	b0 58       	subi	r27, 0x80	; 128
     892:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <g_Cdes>
     896:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <g_Cdes+0x1>
     89a:	a0 93 1e 01 	sts	0x011E, r26	; 0x80011e <g_Cdes+0x2>
	
	// 현재 전류값 저장
	g_Ccur = -( ((g_ADC / 1024. * 5.) - 2.5) * 10.);
     89e:	b0 93 1f 01 	sts	0x011F, r27	; 0x80011f <g_Cdes+0x3>
     8a2:	60 91 64 02 	lds	r22, 0x0264	; 0x800264 <g_ADC>
     8a6:	70 91 65 02 	lds	r23, 0x0265	; 0x800265 <g_ADC+0x1>
     8aa:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <g_ADC+0x2>
     8ae:	90 91 67 02 	lds	r25, 0x0267	; 0x800267 <g_ADC+0x3>
     8b2:	20 e0       	ldi	r18, 0x00	; 0
     8b4:	30 e0       	ldi	r19, 0x00	; 0
     8b6:	40 e8       	ldi	r20, 0x80	; 128
     8b8:	5a e3       	ldi	r21, 0x3A	; 58
     8ba:	2f d5       	rcall	.+2654   	; 0x131a <__mulsf3>
     8bc:	20 e0       	ldi	r18, 0x00	; 0
     8be:	30 e0       	ldi	r19, 0x00	; 0
     8c0:	40 ea       	ldi	r20, 0xA0	; 160
     8c2:	50 e4       	ldi	r21, 0x40	; 64
     8c4:	2a d5       	rcall	.+2644   	; 0x131a <__mulsf3>
     8c6:	20 e0       	ldi	r18, 0x00	; 0
     8c8:	30 e0       	ldi	r19, 0x00	; 0
     8ca:	40 e2       	ldi	r20, 0x20	; 32
     8cc:	50 e4       	ldi	r21, 0x40	; 64
     8ce:	11 d3       	rcall	.+1570   	; 0xef2 <__subsf3>
     8d0:	20 e0       	ldi	r18, 0x00	; 0
     8d2:	30 e0       	ldi	r19, 0x00	; 0
     8d4:	40 e2       	ldi	r20, 0x20	; 32
     8d6:	51 e4       	ldi	r21, 0x41	; 65
     8d8:	20 d5       	rcall	.+2624   	; 0x131a <__mulsf3>
     8da:	dc 01       	movw	r26, r24
     8dc:	cb 01       	movw	r24, r22
     8de:	b0 58       	subi	r27, 0x80	; 128
     8e0:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <g_Ccur>
     8e4:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <g_Ccur+0x1>
     8e8:	a0 93 1a 01 	sts	0x011A, r26	; 0x80011a <g_Ccur+0x2>
     8ec:	b0 93 1b 01 	sts	0x011B, r27	; 0x80011b <g_Ccur+0x3>
	
	// Error, Error sum 저장
	g_Cerr = g_Cdes - g_Ccur;
     8f0:	60 91 1c 01 	lds	r22, 0x011C	; 0x80011c <g_Cdes>
     8f4:	70 91 1d 01 	lds	r23, 0x011D	; 0x80011d <g_Cdes+0x1>
     8f8:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <g_Cdes+0x2>
     8fc:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <g_Cdes+0x3>
     900:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <g_Ccur>
     904:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <g_Ccur+0x1>
     908:	40 91 1a 01 	lds	r20, 0x011A	; 0x80011a <g_Ccur+0x2>
     90c:	50 91 1b 01 	lds	r21, 0x011B	; 0x80011b <g_Ccur+0x3>
     910:	f0 d2       	rcall	.+1504   	; 0xef2 <__subsf3>
     912:	60 93 14 01 	sts	0x0114, r22	; 0x800114 <g_Cerr>
     916:	70 93 15 01 	sts	0x0115, r23	; 0x800115 <g_Cerr+0x1>
     91a:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <g_Cerr+0x2>
     91e:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <g_Cerr+0x3>
	g_Cerr_sum += g_Cerr;
     922:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <g_Cerr>
     926:	70 91 15 01 	lds	r23, 0x0115	; 0x800115 <g_Cerr+0x1>
     92a:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <g_Cerr+0x2>
     92e:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <g_Cerr+0x3>
     932:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <g_Cerr_sum>
     936:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <g_Cerr_sum+0x1>
     93a:	40 91 12 01 	lds	r20, 0x0112	; 0x800112 <g_Cerr_sum+0x2>
     93e:	50 91 13 01 	lds	r21, 0x0113	; 0x800113 <g_Cerr_sum+0x3>
     942:	d8 d2       	rcall	.+1456   	; 0xef4 <__addsf3>
     944:	60 93 10 01 	sts	0x0110, r22	; 0x800110 <g_Cerr_sum>
     948:	70 93 11 01 	sts	0x0111, r23	; 0x800111 <g_Cerr_sum+0x1>
	
	// Current Control output = Voltage value;
	cur_control = Kp_c * g_Cerr + Ki_c * g_Cerr_sum * dt_cur;
     94c:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <g_Cerr_sum+0x2>
     950:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <g_Cerr_sum+0x3>
     954:	80 90 14 01 	lds	r8, 0x0114	; 0x800114 <g_Cerr>
     958:	90 90 15 01 	lds	r9, 0x0115	; 0x800115 <g_Cerr+0x1>
     95c:	a0 90 16 01 	lds	r10, 0x0116	; 0x800116 <g_Cerr+0x2>
     960:	b0 90 17 01 	lds	r11, 0x0117	; 0x800117 <g_Cerr+0x3>
     964:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <g_Cerr_sum>
     968:	70 91 11 01 	lds	r23, 0x0111	; 0x800111 <g_Cerr_sum+0x1>
     96c:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <g_Cerr_sum+0x2>
     970:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <g_Cerr_sum+0x3>
     974:	23 e3       	ldi	r18, 0x33	; 51
     976:	3b e3       	ldi	r19, 0x3B	; 59
     978:	4a e0       	ldi	r20, 0x0A	; 10
     97a:	55 e4       	ldi	r21, 0x45	; 69
     97c:	ce d4       	rcall	.+2460   	; 0x131a <__mulsf3>
     97e:	2f e6       	ldi	r18, 0x6F	; 111
     980:	32 e1       	ldi	r19, 0x12	; 18
     982:	43 e0       	ldi	r20, 0x03	; 3
     984:	5a e3       	ldi	r21, 0x3A	; 58
     986:	c9 d4       	rcall	.+2450   	; 0x131a <__mulsf3>
     988:	6b 01       	movw	r12, r22
     98a:	7c 01       	movw	r14, r24
     98c:	26 e4       	ldi	r18, 0x46	; 70
     98e:	36 eb       	ldi	r19, 0xB6	; 182
     990:	43 e5       	ldi	r20, 0x53	; 83
     992:	5f e3       	ldi	r21, 0x3F	; 63
     994:	c5 01       	movw	r24, r10
     996:	b4 01       	movw	r22, r8
     998:	c0 d4       	rcall	.+2432   	; 0x131a <__mulsf3>
     99a:	9b 01       	movw	r18, r22
     99c:	ac 01       	movw	r20, r24
     99e:	c7 01       	movw	r24, r14
     9a0:	b6 01       	movw	r22, r12
     9a2:	a8 d2       	rcall	.+1360   	; 0xef4 <__addsf3>
     9a4:	77 d3       	rcall	.+1774   	; 0x1094 <__fixsfsi>
     9a6:	70 93 0f 01 	sts	0x010F, r23	; 0x80010f <cur_control+0x1>
	
	// EMF feed-forward
	cur_control += g_Vcur * Ke;
     9aa:	60 93 0e 01 	sts	0x010E, r22	; 0x80010e <cur_control>
     9ae:	60 91 28 01 	lds	r22, 0x0128	; 0x800128 <g_Vcur>
     9b2:	70 91 29 01 	lds	r23, 0x0129	; 0x800129 <g_Vcur+0x1>
     9b6:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <g_Vcur+0x2>
     9ba:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <g_Vcur+0x3>
     9be:	e0 90 0e 01 	lds	r14, 0x010E	; 0x80010e <cur_control>
     9c2:	f0 90 0f 01 	lds	r15, 0x010F	; 0x80010f <cur_control+0x1>
     9c6:	2f ed       	ldi	r18, 0xDF	; 223
     9c8:	30 ee       	ldi	r19, 0xE0	; 224
     9ca:	4b e8       	ldi	r20, 0x8B	; 139
     9cc:	5d e3       	ldi	r21, 0x3D	; 61
     9ce:	a5 d4       	rcall	.+2378   	; 0x131a <__mulsf3>
     9d0:	4b 01       	movw	r8, r22
     9d2:	5c 01       	movw	r10, r24
     9d4:	b7 01       	movw	r22, r14
     9d6:	ff 0c       	add	r15, r15
     9d8:	88 0b       	sbc	r24, r24
     9da:	99 0b       	sbc	r25, r25
     9dc:	8e d3       	rcall	.+1820   	; 0x10fa <__floatsisf>
     9de:	9b 01       	movw	r18, r22
     9e0:	ac 01       	movw	r20, r24
     9e2:	c5 01       	movw	r24, r10
     9e4:	b4 01       	movw	r22, r8
     9e6:	86 d2       	rcall	.+1292   	; 0xef4 <__addsf3>
     9e8:	55 d3       	rcall	.+1706   	; 0x1094 <__fixsfsi>
     9ea:	70 93 0f 01 	sts	0x010F, r23	; 0x80010f <cur_control+0x1>
	
	// Voltage Saturation & Anti wind-up
	if(cur_control > 24)
     9ee:	60 93 0e 01 	sts	0x010E, r22	; 0x80010e <cur_control>
     9f2:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <cur_control>
     9f6:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <cur_control+0x1>
	{ 
		g_Cerr_sum -= (cur_control - 24) * Ka_c;
     9fa:	49 97       	sbiw	r24, 0x19	; 25
     9fc:	64 f1       	brlt	.+88     	; 0xa56 <__LOCK_REGION_LENGTH__+0x656>
     9fe:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <cur_control>
     a02:	70 91 0f 01 	lds	r23, 0x010F	; 0x80010f <cur_control+0x1>
     a06:	c0 90 10 01 	lds	r12, 0x0110	; 0x800110 <g_Cerr_sum>
     a0a:	d0 90 11 01 	lds	r13, 0x0111	; 0x800111 <g_Cerr_sum+0x1>
     a0e:	e0 90 12 01 	lds	r14, 0x0112	; 0x800112 <g_Cerr_sum+0x2>
     a12:	f0 90 13 01 	lds	r15, 0x0113	; 0x800113 <g_Cerr_sum+0x3>
     a16:	68 51       	subi	r22, 0x18	; 24
     a18:	71 09       	sbc	r23, r1
     a1a:	07 2e       	mov	r0, r23
     a1c:	00 0c       	add	r0, r0
     a1e:	88 0b       	sbc	r24, r24
     a20:	99 0b       	sbc	r25, r25
     a22:	6b d3       	rcall	.+1750   	; 0x10fa <__floatsisf>
     a24:	22 ef       	ldi	r18, 0xF2	; 242
     a26:	3a ef       	ldi	r19, 0xFA	; 250
     a28:	40 e8       	ldi	r20, 0x80	; 128
     a2a:	50 e4       	ldi	r21, 0x40	; 64
     a2c:	76 d4       	rcall	.+2284   	; 0x131a <__mulsf3>
     a2e:	9b 01       	movw	r18, r22
     a30:	ac 01       	movw	r20, r24
     a32:	c7 01       	movw	r24, r14
     a34:	b6 01       	movw	r22, r12
     a36:	5d d2       	rcall	.+1210   	; 0xef2 <__subsf3>
     a38:	60 93 10 01 	sts	0x0110, r22	; 0x800110 <g_Cerr_sum>
     a3c:	70 93 11 01 	sts	0x0111, r23	; 0x800111 <g_Cerr_sum+0x1>
     a40:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <g_Cerr_sum+0x2>
		cur_control = 24;
     a44:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <g_Cerr_sum+0x3>
     a48:	88 e1       	ldi	r24, 0x18	; 24
     a4a:	90 e0       	ldi	r25, 0x00	; 0
     a4c:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <cur_control+0x1>
	}
	else if(cur_control < -24)
     a50:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <cur_control>
     a54:	32 c0       	rjmp	.+100    	; 0xaba <__LOCK_REGION_LENGTH__+0x6ba>
     a56:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <cur_control>
     a5a:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <cur_control+0x1>
	{
		g_Cerr_sum -= (cur_control + 24) * Ka_c;
     a5e:	88 3e       	cpi	r24, 0xE8	; 232
     a60:	9f 4f       	sbci	r25, 0xFF	; 255
     a62:	5c f5       	brge	.+86     	; 0xaba <__LOCK_REGION_LENGTH__+0x6ba>
     a64:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <cur_control>
     a68:	70 91 0f 01 	lds	r23, 0x010F	; 0x80010f <cur_control+0x1>
     a6c:	c0 90 10 01 	lds	r12, 0x0110	; 0x800110 <g_Cerr_sum>
     a70:	d0 90 11 01 	lds	r13, 0x0111	; 0x800111 <g_Cerr_sum+0x1>
     a74:	e0 90 12 01 	lds	r14, 0x0112	; 0x800112 <g_Cerr_sum+0x2>
     a78:	f0 90 13 01 	lds	r15, 0x0113	; 0x800113 <g_Cerr_sum+0x3>
     a7c:	68 5e       	subi	r22, 0xE8	; 232
     a7e:	7f 4f       	sbci	r23, 0xFF	; 255
     a80:	07 2e       	mov	r0, r23
     a82:	00 0c       	add	r0, r0
     a84:	88 0b       	sbc	r24, r24
     a86:	99 0b       	sbc	r25, r25
     a88:	38 d3       	rcall	.+1648   	; 0x10fa <__floatsisf>
     a8a:	22 ef       	ldi	r18, 0xF2	; 242
     a8c:	3a ef       	ldi	r19, 0xFA	; 250
     a8e:	40 e8       	ldi	r20, 0x80	; 128
     a90:	50 e4       	ldi	r21, 0x40	; 64
     a92:	43 d4       	rcall	.+2182   	; 0x131a <__mulsf3>
     a94:	9b 01       	movw	r18, r22
     a96:	ac 01       	movw	r20, r24
     a98:	c7 01       	movw	r24, r14
     a9a:	b6 01       	movw	r22, r12
     a9c:	2a d2       	rcall	.+1108   	; 0xef2 <__subsf3>
     a9e:	60 93 10 01 	sts	0x0110, r22	; 0x800110 <g_Cerr_sum>
     aa2:	70 93 11 01 	sts	0x0111, r23	; 0x800111 <g_Cerr_sum+0x1>
     aa6:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <g_Cerr_sum+0x2>
     aaa:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <g_Cerr_sum+0x3>
		cur_control = -24;
     aae:	88 ee       	ldi	r24, 0xE8	; 232
     ab0:	9f ef       	ldi	r25, 0xFF	; 255
     ab2:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <cur_control+0x1>
     ab6:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <cur_control>
	}
	
	SetDutyCW(cur_control);
     aba:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <cur_control>
     abe:	70 91 0f 01 	lds	r23, 0x010F	; 0x80010f <cur_control+0x1>
     ac2:	07 2e       	mov	r0, r23
     ac4:	00 0c       	add	r0, r0
     ac6:	88 0b       	sbc	r24, r24
     ac8:	99 0b       	sbc	r25, r25
     aca:	17 d3       	rcall	.+1582   	; 0x10fa <__floatsisf>
     acc:	fe da       	rcall	.-2564   	; 0xca <SetDutyCW>
     ace:	80 91 63 02 	lds	r24, 0x0263	; 0x800263 <g_TimerCnt>

///////////////////
// Control End //
	g_TimerCnt++;
     ad2:	8f 5f       	subi	r24, 0xFF	; 255
     ad4:	80 93 63 02 	sts	0x0263, r24	; 0x800263 <g_TimerCnt>
     ad8:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <g_SendFlag>
	g_SendFlag++;
     adc:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <g_SendFlag+0x1>
     ae0:	01 96       	adiw	r24, 0x01	; 1
     ae2:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <g_SendFlag+0x1>
     ae6:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <g_SendFlag>
     aea:	ff 91       	pop	r31

}
     aec:	ef 91       	pop	r30
     aee:	cf 91       	pop	r28
     af0:	bf 91       	pop	r27
     af2:	af 91       	pop	r26
     af4:	9f 91       	pop	r25
     af6:	8f 91       	pop	r24
     af8:	7f 91       	pop	r23
     afa:	6f 91       	pop	r22
     afc:	5f 91       	pop	r21
     afe:	4f 91       	pop	r20
     b00:	3f 91       	pop	r19
     b02:	2f 91       	pop	r18
     b04:	ff 90       	pop	r15
     b06:	ef 90       	pop	r14
     b08:	df 90       	pop	r13
     b0a:	cf 90       	pop	r12
     b0c:	bf 90       	pop	r11
     b0e:	af 90       	pop	r10
     b10:	9f 90       	pop	r9
     b12:	8f 90       	pop	r8
     b14:	0f 90       	pop	r0
     b16:	0b be       	out	0x3b, r0	; 59
     b18:	0f 90       	pop	r0
     b1a:	0f be       	out	0x3f, r0	; 63
     b1c:	0f 90       	pop	r0
     b1e:	1f 90       	pop	r1
     b20:	18 95       	reti

00000b22 <main>:
     b22:	cf 93       	push	r28



int main(void)
{
     b24:	df 93       	push	r29
     b26:	cd b7       	in	r28, 0x3d	; 61
     b28:	de b7       	in	r29, 0x3e	; 62
     b2a:	64 97       	sbiw	r28, 0x14	; 20
     b2c:	0f b6       	in	r0, 0x3f	; 63
     b2e:	f8 94       	cli
     b30:	de bf       	out	0x3e, r29	; 62
     b32:	0f be       	out	0x3f, r0	; 63
     b34:	cd bf       	out	0x3d, r28	; 61
	Packet_t packet;
	packet.data.header[0] = packet.data.header[1] = packet.data.header[2] = packet.data.header[3] = 0xFE;
     b36:	8e ef       	ldi	r24, 0xFE	; 254
     b38:	8c 83       	std	Y+4, r24	; 0x04
     b3a:	8b 83       	std	Y+3, r24	; 0x03
     b3c:	8a 83       	std	Y+2, r24	; 0x02
     b3e:	89 83       	std	Y+1, r24	; 0x01
	
	InitIO();
     b40:	5e d1       	rcall	.+700    	; 0xdfe <InitIO>
	InitExtInt();
     b42:	6a d1       	rcall	.+724    	; 0xe18 <InitExtInt>
	
	//Uart
	InitUart0();
     b44:	aa d1       	rcall	.+852    	; 0xe9a <InitUart0>
	InitUart1();
     b46:	b2 d1       	rcall	.+868    	; 0xeac <InitUart1>
	
	//SPI
	InitSPI();
     b48:	c1 d1       	rcall	.+898    	; 0xecc <InitSPI>
     b4a:	6d d1       	rcall	.+730    	; 0xe26 <InitTimer0>
	
	//Timer
	InitTimer0();
     b4c:	71 d1       	rcall	.+738    	; 0xe30 <InitTimer1>
     b4e:	83 d1       	rcall	.+774    	; 0xe56 <InitTimer3>
	InitTimer1();
     b50:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
	InitTimer3();
     b54:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>


	TCNT1 = TCNT3 = 0;
     b58:	1d bc       	out	0x2d, r1	; 45
     b5a:	1c bc       	out	0x2c, r1	; 44
     b5c:	60 e0       	ldi	r22, 0x00	; 0
	SetDutyCW(0.);
     b5e:	70 e0       	ldi	r23, 0x00	; 0
     b60:	cb 01       	movw	r24, r22
     b62:	b3 da       	rcall	.-2714   	; 0xca <SetDutyCW>
     b64:	95 d1       	rcall	.+810    	; 0xe90 <InitADC>
     b66:	de da       	rcall	.-2628   	; 0x124 <InitLS7366>
	
	//ADC
	InitADC();
     b68:	83 e8       	ldi	r24, 0x83	; 131
     b6a:	82 bf       	out	0x32, r24	; 50
	
	//LS7366
	InitLS7366();
     b6c:	78 94       	sei
     b6e:	71 2c       	mov	r7, r1
	
	TCNT0 = 256 - 125;
     b70:	0f 2e       	mov	r0, r31
     b72:	f4 e1       	ldi	r31, 0x14	; 20
	sei();
     b74:	5f 2e       	mov	r5, r31

	unsigned char check = 0;
     b76:	f0 2d       	mov	r31, r0
		if(g_SendFlag > 19)
		{
			g_SendFlag = 0;			

			packet.data.id = g_ID;
			packet.data.size = sizeof(Packet_data_t);
     b78:	0f 2e       	mov	r0, r31
     b7a:	f3 e0       	ldi	r31, 0x03	; 3
     b7c:	6f 2e       	mov	r6, r31
     b7e:	f0 2d       	mov	r31, r0
			packet.data.mode = 3;
     b80:	7e 01       	movw	r14, r28
     b82:	85 e1       	ldi	r24, 0x15	; 21
     b84:	e8 0e       	add	r14, r24
     b86:	f1 1c       	adc	r15, r1
     b88:	0f 2e       	mov	r0, r31
     b8a:	fb e4       	ldi	r31, 0x4B	; 75
     b8c:	cf 2e       	mov	r12, r31
     b8e:	f2 e0       	ldi	r31, 0x02	; 2
					//if(g_PacketBuffer.data.id == g_ID)
					//{
						//g_PacketMode = 2;
					//}
					
					if(g_PacketBuffer.data.id == 1)
     b90:	df 2e       	mov	r13, r31
     b92:	f0 2d       	mov	r31, r0
     b94:	68 94       	set
     b96:	88 24       	eor	r8, r8
     b98:	81 f8       	bld	r8, 1
     b9a:	91 2c       	mov	r9, r1
						mode = 1;	// Mobile mode
						g_PacketMode = 2;
					}
					else if(g_PacketBuffer.data.id == 2)
					{
						mode = 2;	// Joint mode
     b9c:	68 94       	set
     b9e:	44 24       	eor	r4, r4
     ba0:	41 f8       	bld	r4, 1
     ba2:	aa 24       	eor	r10, r10
						g_PacketMode = 2;
     ba4:	a3 94       	inc	r10
     ba6:	b1 2c       	mov	r11, r1
     ba8:	33 24       	eor	r3, r3
						//g_PacketMode = 2;
					//}
					
					if(g_PacketBuffer.data.id == 1)
					{
						mode = 1;	// Mobile mode
     baa:	33 94       	inc	r3
     bac:	c8 c0       	rjmp	.+400    	; 0xd3e <main+0x21c>
     bae:	80 91 6d 02 	lds	r24, 0x026D	; 0x80026d <g_PacketMode>
				if (g_buf[g_BufReadCnt] == 0xFF) 
				{
					checkSize++;
					if (checkSize == 4) 
					{
						g_PacketMode = 1;
     bb2:	81 30       	cpi	r24, 0x01	; 1
     bb4:	e9 f0       	breq	.+58     	; 0xbf0 <main+0xce>
		
		
		for(;g_BufReadCnt != g_BufWriteCnt; g_BufReadCnt++)
		{
			
			switch(g_PacketMode)
     bb6:	20 f0       	brcs	.+8      	; 0xbc0 <main+0x9e>
     bb8:	82 30       	cpi	r24, 0x02	; 2
     bba:	09 f4       	brne	.+2      	; 0xbbe <main+0x9c>
     bbc:	49 c0       	rjmp	.+146    	; 0xc50 <main+0x12e>
     bbe:	ba c0       	rjmp	.+372    	; 0xd34 <main+0x212>
     bc0:	e0 91 6c 02 	lds	r30, 0x026C	; 0x80026c <g_BufReadCnt>
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
     bc6:	e7 5b       	subi	r30, 0xB7	; 183
			{
			case 0:
				
				if (g_buf[g_BufReadCnt] == 0xFF) 
     bc8:	fe 4f       	sbci	r31, 0xFE	; 254
     bca:	80 81       	ld	r24, Z
     bcc:	8f 3f       	cpi	r24, 0xFF	; 255
     bce:	69 f4       	brne	.+26     	; 0xbea <main+0xc8>
     bd0:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <checkSize>
     bd4:	8f 5f       	subi	r24, 0xFF	; 255
     bd6:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <checkSize>
				{
					checkSize++;
     bda:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <checkSize>
     bde:	84 30       	cpi	r24, 0x04	; 4
     be0:	09 f0       	breq	.+2      	; 0xbe4 <main+0xc2>
					if (checkSize == 4) 
     be2:	a8 c0       	rjmp	.+336    	; 0xd34 <main+0x212>
     be4:	30 92 6d 02 	sts	0x026D, r3	; 0x80026d <g_PacketMode>
     be8:	a5 c0       	rjmp	.+330    	; 0xd34 <main+0x212>
     bea:	10 92 4a 02 	sts	0x024A, r1	; 0x80024a <checkSize>
					{
						g_PacketMode = 1;
     bee:	a2 c0       	rjmp	.+324    	; 0xd34 <main+0x212>
     bf0:	e0 91 4a 02 	lds	r30, 0x024A	; 0x80024a <checkSize>
					}
				}
				else 
				{
					checkSize = 0;
     bf4:	81 e0       	ldi	r24, 0x01	; 1
     bf6:	8e 0f       	add	r24, r30
				}
				break;
				
			case 1:

				g_PacketBuffer.buffer[checkSize++] = g_buf[g_BufReadCnt];
     bf8:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <checkSize>
     bfc:	f0 e0       	ldi	r31, 0x00	; 0
     bfe:	a0 91 6c 02 	lds	r26, 0x026C	; 0x80026c <g_BufReadCnt>
     c02:	b0 e0       	ldi	r27, 0x00	; 0
     c04:	a7 5b       	subi	r26, 0xB7	; 183
     c06:	be 4f       	sbci	r27, 0xFE	; 254
     c08:	8c 91       	ld	r24, X
     c0a:	e5 5b       	subi	r30, 0xB5	; 181
     c0c:	fd 4f       	sbci	r31, 0xFD	; 253
     c0e:	80 83       	st	Z, r24
     c10:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <checkSize>
     c14:	88 30       	cpi	r24, 0x08	; 8
     c16:	09 f0       	breq	.+2      	; 0xc1a <main+0xf8>
				
				if (checkSize == 8) 
     c18:	8d c0       	rjmp	.+282    	; 0xd34 <main+0x212>
     c1a:	f6 01       	movw	r30, r12
     c1c:	85 81       	ldd	r24, Z+5	; 0x05
     c1e:	81 30       	cpi	r24, 0x01	; 1
     c20:	39 f4       	brne	.+14     	; 0xc30 <main+0x10e>
					//if(g_PacketBuffer.data.id == g_ID)
					//{
						//g_PacketMode = 2;
					//}
					
					if(g_PacketBuffer.data.id == 1)
     c22:	b0 92 0b 01 	sts	0x010B, r11	; 0x80010b <mode+0x1>
     c26:	a0 92 0a 01 	sts	0x010A, r10	; 0x80010a <mode>
					{
						mode = 1;	// Mobile mode
     c2a:	40 92 6d 02 	sts	0x026D, r4	; 0x80026d <g_PacketMode>
     c2e:	82 c0       	rjmp	.+260    	; 0xd34 <main+0x212>
     c30:	f6 01       	movw	r30, r12
						g_PacketMode = 2;
     c32:	85 81       	ldd	r24, Z+5	; 0x05
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	39 f4       	brne	.+14     	; 0xc46 <main+0x124>
					}
					else if(g_PacketBuffer.data.id == 2)
     c38:	90 92 0b 01 	sts	0x010B, r9	; 0x80010b <mode+0x1>
     c3c:	80 92 0a 01 	sts	0x010A, r8	; 0x80010a <mode>
					{
						mode = 2;	// Joint mode
     c40:	40 92 6d 02 	sts	0x026D, r4	; 0x80026d <g_PacketMode>
     c44:	77 c0       	rjmp	.+238    	; 0xd34 <main+0x212>
     c46:	10 92 6d 02 	sts	0x026D, r1	; 0x80026d <g_PacketMode>
						g_PacketMode = 2;
     c4a:	10 92 4a 02 	sts	0x024A, r1	; 0x80024a <checkSize>
					}
					else
					{
						g_PacketMode = 0;
     c4e:	72 c0       	rjmp	.+228    	; 0xd34 <main+0x212>
     c50:	e0 91 4a 02 	lds	r30, 0x024A	; 0x80024a <checkSize>
						checkSize = 0;
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	8e 0f       	add	r24, r30

				break;
			
			case 2:
				
				g_PacketBuffer.buffer[checkSize++] = g_buf[g_BufReadCnt];
     c58:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <checkSize>
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	a0 91 6c 02 	lds	r26, 0x026C	; 0x80026c <g_BufReadCnt>
     c62:	b0 e0       	ldi	r27, 0x00	; 0
     c64:	a7 5b       	subi	r26, 0xB7	; 183
     c66:	be 4f       	sbci	r27, 0xFE	; 254
     c68:	8c 91       	ld	r24, X
     c6a:	e5 5b       	subi	r30, 0xB5	; 181
     c6c:	fd 4f       	sbci	r31, 0xFD	; 253
     c6e:	80 83       	st	Z, r24
     c70:	e0 91 6c 02 	lds	r30, 0x026C	; 0x80026c <g_BufReadCnt>
     c74:	f0 e0       	ldi	r31, 0x00	; 0
     c76:	e7 5b       	subi	r30, 0xB7	; 183
				check += g_buf[g_BufReadCnt];
     c78:	fe 4f       	sbci	r31, 0xFE	; 254
     c7a:	80 81       	ld	r24, Z
     c7c:	78 0e       	add	r7, r24
     c7e:	f6 01       	movw	r30, r12
     c80:	94 81       	ldd	r25, Z+4	; 0x04
     c82:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <checkSize>
				
				if (checkSize == g_PacketBuffer.data.size) 
     c86:	98 13       	cpse	r25, r24
     c88:	44 c0       	rjmp	.+136    	; 0xd12 <main+0x1f0>
     c8a:	87 81       	ldd	r24, Z+7	; 0x07
     c8c:	78 12       	cpse	r7, r24
     c8e:	3b c0       	rjmp	.+118    	; 0xd06 <main+0x1e4>
				{

					if(check == g_PacketBuffer.data.check)
     c90:	86 81       	ldd	r24, Z+6	; 0x06
     c92:	82 30       	cpi	r24, 0x02	; 2
     c94:	c1 f5       	brne	.+112    	; 0xd06 <main+0x1e4>
					{

						switch(g_PacketBuffer.data.mode)
     c96:	60 85       	ldd	r22, Z+8	; 0x08
     c98:	71 85       	ldd	r23, Z+9	; 0x09
						{

							case 2:
							g_Pdes = g_PacketBuffer.data.pos / 1000.;
     c9a:	82 85       	ldd	r24, Z+10	; 0x0a
     c9c:	93 85       	ldd	r25, Z+11	; 0x0b
     c9e:	2d d2       	rcall	.+1114   	; 0x10fa <__floatsisf>
     ca0:	20 e0       	ldi	r18, 0x00	; 0
     ca2:	30 e0       	ldi	r19, 0x00	; 0
     ca4:	4a e7       	ldi	r20, 0x7A	; 122
     ca6:	54 e4       	ldi	r21, 0x44	; 68
     ca8:	8d d1       	rcall	.+794    	; 0xfc4 <__divsf3>
     caa:	60 93 40 01 	sts	0x0140, r22	; 0x800140 <g_Pdes>
     cae:	70 93 41 01 	sts	0x0141, r23	; 0x800141 <g_Pdes+0x1>
     cb2:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <g_Pdes+0x2>
     cb6:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <g_Pdes+0x3>
     cba:	f6 01       	movw	r30, r12
     cbc:	64 85       	ldd	r22, Z+12	; 0x0c
								//else if(g_Pdes < 0)
								//{
									//g_Pdes += 360; 
								//}
							//}
							g_Vlimit = g_PacketBuffer.data.velo / 1000.;
     cbe:	75 85       	ldd	r23, Z+13	; 0x0d
     cc0:	86 85       	ldd	r24, Z+14	; 0x0e
     cc2:	97 85       	ldd	r25, Z+15	; 0x0f
     cc4:	1a d2       	rcall	.+1076   	; 0x10fa <__floatsisf>
     cc6:	20 e0       	ldi	r18, 0x00	; 0
     cc8:	30 e0       	ldi	r19, 0x00	; 0
     cca:	4a e7       	ldi	r20, 0x7A	; 122
     ccc:	54 e4       	ldi	r21, 0x44	; 68
     cce:	7a d1       	rcall	.+756    	; 0xfc4 <__divsf3>
     cd0:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <g_Vlimit>
     cd4:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <g_Vlimit+0x1>
     cd8:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <g_Vlimit+0x2>
     cdc:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <g_Vlimit+0x3>
     ce0:	f6 01       	movw	r30, r12
     ce2:	60 89       	ldd	r22, Z+16	; 0x10
							g_Climit = g_PacketBuffer.data.cur / 1000.;
     ce4:	71 89       	ldd	r23, Z+17	; 0x11
     ce6:	82 89       	ldd	r24, Z+18	; 0x12
     ce8:	93 89       	ldd	r25, Z+19	; 0x13
     cea:	07 d2       	rcall	.+1038   	; 0x10fa <__floatsisf>
     cec:	20 e0       	ldi	r18, 0x00	; 0
     cee:	30 e0       	ldi	r19, 0x00	; 0
     cf0:	4a e7       	ldi	r20, 0x7A	; 122
     cf2:	54 e4       	ldi	r21, 0x44	; 68
     cf4:	67 d1       	rcall	.+718    	; 0xfc4 <__divsf3>
     cf6:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__DATA_REGION_ORIGIN__>
     cfa:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     cfe:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     d02:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     d06:	10 92 6d 02 	sts	0x026D, r1	; 0x80026d <g_PacketMode>
     d0a:	10 92 4a 02 	sts	0x024A, r1	; 0x80024a <checkSize>
							break;
							}
					}
					
					check = 0;
					g_PacketMode = 0;
     d0e:	71 2c       	mov	r7, r1
					checkSize = 0;
     d10:	11 c0       	rjmp	.+34     	; 0xd34 <main+0x212>
     d12:	f6 01       	movw	r30, r12
							g_Climit = g_PacketBuffer.data.cur / 1000.;
							break;
							}
					}
					
					check = 0;
     d14:	94 81       	ldd	r25, Z+4	; 0x04
     d16:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <checkSize>
					g_PacketMode = 0;
					checkSize = 0;
				}
				else if(checkSize > g_PacketBuffer.data.size || checkSize > sizeof(Packet_t)) 
     d1a:	98 17       	cp	r25, r24
     d1c:	20 f0       	brcs	.+8      	; 0xd26 <main+0x204>
     d1e:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <checkSize>
     d22:	85 31       	cpi	r24, 0x15	; 21
     d24:	38 f0       	brcs	.+14     	; 0xd34 <main+0x212>
     d26:	86 e6       	ldi	r24, 0x66	; 102
     d28:	d6 d0       	rcall	.+428    	; 0xed6 <TransUart0>
     d2a:	10 92 6d 02 	sts	0x026D, r1	; 0x80026d <g_PacketMode>
				{
					TransUart0('f');
     d2e:	10 92 4a 02 	sts	0x024A, r1	; 0x80024a <checkSize>
					check = 0;
					g_PacketMode = 0;
     d32:	71 2c       	mov	r7, r1
     d34:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <g_BufReadCnt>
					checkSize = 0;
     d38:	8f 5f       	subi	r24, 0xFF	; 255
					checkSize = 0;
				}
				else if(checkSize > g_PacketBuffer.data.size || checkSize > sizeof(Packet_t)) 
				{
					TransUart0('f');
					check = 0;
     d3a:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <g_BufReadCnt>
		//TransUart1(' ');
		//TransNumUart1(g_Ccur * 100);
		//TransUart1(13);
		
		
		for(;g_BufReadCnt != g_BufWriteCnt; g_BufReadCnt++)
     d3e:	90 91 6c 02 	lds	r25, 0x026C	; 0x80026c <g_BufReadCnt>
     d42:	80 91 49 02 	lds	r24, 0x0249	; 0x800249 <g_BufWriteCnt>
     d46:	98 13       	cpse	r25, r24
     d48:	32 cf       	rjmp	.-412    	; 0xbae <main+0x8c>
     d4a:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <g_SendFlag>
     d4e:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <g_SendFlag+0x1>
					checkSize = 0;
				}
			}
		}

		if(g_SendFlag > 19)
     d52:	44 97       	sbiw	r24, 0x14	; 20
     d54:	a4 f3       	brlt	.-24     	; 0xd3e <main+0x21c>
     d56:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <g_SendFlag+0x1>
     d5a:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <g_SendFlag>
		{
			g_SendFlag = 0;			
     d5e:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <g_ID>
     d62:	8e 83       	std	Y+6, r24	; 0x06
     d64:	5d 82       	std	Y+5, r5	; 0x05

			packet.data.id = g_ID;
     d66:	6f 82       	std	Y+7, r6	; 0x07
			packet.data.size = sizeof(Packet_data_t);
     d68:	18 86       	std	Y+8, r1	; 0x08
			packet.data.mode = 3;
     d6a:	60 91 38 01 	lds	r22, 0x0138	; 0x800138 <g_Pcur>
			//packet.data.pos = g_Pdes * 1000; 
			//packet.data.velo = g_Vlimit * 1000;
			//packet.data.cur = g_Climit * 1000;  
			
			// 원래
			packet.data.pos = g_Pcur * 1000;
     d6e:	70 91 39 01 	lds	r23, 0x0139	; 0x800139 <g_Pcur+0x1>
     d72:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <g_Pcur+0x2>
     d76:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <g_Pcur+0x3>
     d7a:	20 e0       	ldi	r18, 0x00	; 0
     d7c:	30 e0       	ldi	r19, 0x00	; 0
     d7e:	4a e7       	ldi	r20, 0x7A	; 122
     d80:	54 e4       	ldi	r21, 0x44	; 68
     d82:	cb d2       	rcall	.+1430   	; 0x131a <__mulsf3>
     d84:	87 d1       	rcall	.+782    	; 0x1094 <__fixsfsi>
     d86:	69 87       	std	Y+9, r22	; 0x09
     d88:	7a 87       	std	Y+10, r23	; 0x0a
     d8a:	8b 87       	std	Y+11, r24	; 0x0b
     d8c:	9c 87       	std	Y+12, r25	; 0x0c
     d8e:	60 91 28 01 	lds	r22, 0x0128	; 0x800128 <g_Vcur>
			packet.data.velo = g_Vcur * 1000;
     d92:	70 91 29 01 	lds	r23, 0x0129	; 0x800129 <g_Vcur+0x1>
     d96:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <g_Vcur+0x2>
     d9a:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <g_Vcur+0x3>
     d9e:	20 e0       	ldi	r18, 0x00	; 0
     da0:	30 e0       	ldi	r19, 0x00	; 0
     da2:	4a e7       	ldi	r20, 0x7A	; 122
     da4:	54 e4       	ldi	r21, 0x44	; 68
     da6:	b9 d2       	rcall	.+1394   	; 0x131a <__mulsf3>
     da8:	75 d1       	rcall	.+746    	; 0x1094 <__fixsfsi>
     daa:	6d 87       	std	Y+13, r22	; 0x0d
     dac:	7e 87       	std	Y+14, r23	; 0x0e
     dae:	8f 87       	std	Y+15, r24	; 0x0f
     db0:	98 8b       	std	Y+16, r25	; 0x10
     db2:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <g_Ccur>
			packet.data.cur = g_Ccur * 1000;
     db6:	70 91 19 01 	lds	r23, 0x0119	; 0x800119 <g_Ccur+0x1>
     dba:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <g_Ccur+0x2>
     dbe:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <g_Ccur+0x3>
     dc2:	20 e0       	ldi	r18, 0x00	; 0
     dc4:	30 e0       	ldi	r19, 0x00	; 0
     dc6:	4a e7       	ldi	r20, 0x7A	; 122
     dc8:	54 e4       	ldi	r21, 0x44	; 68
     dca:	a7 d2       	rcall	.+1358   	; 0x131a <__mulsf3>
     dcc:	63 d1       	rcall	.+710    	; 0x1094 <__fixsfsi>
     dce:	69 8b       	std	Y+17, r22	; 0x11
     dd0:	7a 8b       	std	Y+18, r23	; 0x12
     dd2:	8b 8b       	std	Y+19, r24	; 0x13
     dd4:	9c 8b       	std	Y+20, r25	; 0x14
     dd6:	fe 01       	movw	r30, r28
     dd8:	39 96       	adiw	r30, 0x09	; 9
     dda:	81 91       	ld	r24, Z+
     ddc:	98 85       	ldd	r25, Y+8	; 0x08
     dde:	89 0f       	add	r24, r25
			//packet.data.pos = -1 * g_Pcur * 1000;
			//packet.data.velo = -1 * g_Vcur * 1000;
			//packet.data.cur = -1 * g_Ccur * 1000;
			
			for (int i = 8; i < sizeof(Packet_t); i++)
			packet.data.check += packet.buffer[i];
     de0:	88 87       	std	Y+8, r24	; 0x08
     de2:	ee 15       	cp	r30, r14
     de4:	ff 05       	cpc	r31, r15
     de6:	c9 f7       	brne	.-14     	; 0xdda <main+0x2b8>
			// test
			//packet.data.pos = -1 * g_Pcur * 1000;
			//packet.data.velo = -1 * g_Vcur * 1000;
			//packet.data.cur = -1 * g_Ccur * 1000;
			
			for (int i = 8; i < sizeof(Packet_t); i++)
     de8:	8e 01       	movw	r16, r28
     dea:	0f 5f       	subi	r16, 0xFF	; 255
     dec:	1f 4f       	sbci	r17, 0xFF	; 255
     dee:	f8 01       	movw	r30, r16
     df0:	81 91       	ld	r24, Z+
     df2:	8f 01       	movw	r16, r30
			packet.data.check += packet.buffer[i];
			
			for(int i=0; i<packet.data.size; i++)
			{
				TransUart0(packet.buffer[i]);
     df4:	70 d0       	rcall	.+224    	; 0xed6 <TransUart0>
     df6:	0e 15       	cp	r16, r14
     df8:	1f 05       	cpc	r17, r15
     dfa:	c9 f7       	brne	.-14     	; 0xdee <main+0x2cc>
     dfc:	a0 cf       	rjmp	.-192    	; 0xd3e <main+0x21c>

00000dfe <InitIO>:
			//packet.data.cur = -1 * g_Ccur * 1000;
			
			for (int i = 8; i < sizeof(Packet_t); i++)
			packet.data.check += packet.buffer[i];
			
			for(int i=0; i<packet.data.size; i++)
     dfe:	8f ef       	ldi	r24, 0xFF	; 255
     e00:	8a bb       	out	0x1a, r24	; 26
     e02:	84 bb       	out	0x14, r24	; 20
     e04:	88 e0       	ldi	r24, 0x08	; 8
	TransUart1( ((num%100000) / 10000) + 48);
	TransUart1( ((num%10000) / 1000) + 48);
	TransUart1( ((num%1000) / 100) + 48);
	TransUart1( ((num%100) / 10) + 48);
	TransUart1( num%10 + 48 );
}
     e06:	81 bb       	out	0x11, r24	; 17
     e08:	87 e6       	ldi	r24, 0x67	; 103
     e0a:	87 bb       	out	0x17, r24	; 23
     e0c:	8a e1       	ldi	r24, 0x1A	; 26
     e0e:	82 b9       	out	0x02, r24	; 2
     e10:	1b ba       	out	0x1b, r1	; 27
     e12:	87 e0       	ldi	r24, 0x07	; 7
     e14:	88 bb       	out	0x18, r24	; 24
     e16:	08 95       	ret

00000e18 <InitExtInt>:
     e18:	11 ba       	out	0x11, r1	; 17
     e1a:	8a e0       	ldi	r24, 0x0A	; 10
     e1c:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
     e20:	83 e0       	ldi	r24, 0x03	; 3
     e22:	89 bf       	out	0x39, r24	; 57
     e24:	08 95       	ret

00000e26 <InitTimer0>:
     e26:	84 e0       	ldi	r24, 0x04	; 4
     e28:	83 bf       	out	0x33, r24	; 51
     e2a:	81 e0       	ldi	r24, 0x01	; 1
     e2c:	87 bf       	out	0x37, r24	; 55
     e2e:	08 95       	ret

00000e30 <InitTimer1>:
     e30:	82 ee       	ldi	r24, 0xE2	; 226
     e32:	8f bd       	out	0x2f, r24	; 47
     e34:	81 e1       	ldi	r24, 0x11	; 17
     e36:	8e bd       	out	0x2e, r24	; 46
     e38:	8f e8       	ldi	r24, 0x8F	; 143
     e3a:	91 e0       	ldi	r25, 0x01	; 1
     e3c:	97 bd       	out	0x27, r25	; 39
     e3e:	86 bd       	out	0x26, r24	; 38
     e40:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     e44:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     e48:	1b bc       	out	0x2b, r1	; 43
     e4a:	1a bc       	out	0x2a, r1	; 42
     e4c:	19 bc       	out	0x29, r1	; 41
     e4e:	18 bc       	out	0x28, r1	; 40
     e50:	1d bc       	out	0x2d, r1	; 45
     e52:	1c bc       	out	0x2c, r1	; 44
     e54:	08 95       	ret

00000e56 <InitTimer3>:
     e56:	82 eb       	ldi	r24, 0xB2	; 178
     e58:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     e5c:	81 e1       	ldi	r24, 0x11	; 17
     e5e:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
     e62:	8f e8       	ldi	r24, 0x8F	; 143
     e64:	91 e0       	ldi	r25, 0x01	; 1
     e66:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     e6a:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     e6e:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
     e72:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
     e76:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     e7a:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     e7e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     e82:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     e86:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     e8a:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     e8e:	08 95       	ret

00000e90 <InitADC>:
     e90:	80 e4       	ldi	r24, 0x40	; 64
     e92:	87 b9       	out	0x07, r24	; 7
     e94:	86 e8       	ldi	r24, 0x86	; 134
     e96:	86 b9       	out	0x06, r24	; 6
     e98:	08 95       	ret

00000e9a <InitUart0>:
     e9a:	1b b8       	out	0x0b, r1	; 11
     e9c:	88 e9       	ldi	r24, 0x98	; 152
     e9e:	8a b9       	out	0x0a, r24	; 10
     ea0:	86 e0       	ldi	r24, 0x06	; 6
     ea2:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
     ea6:	87 e6       	ldi	r24, 0x67	; 103
     ea8:	89 b9       	out	0x09, r24	; 9
     eaa:	08 95       	ret

00000eac <InitUart1>:
     eac:	81 b3       	in	r24, 0x11	; 17
     eae:	83 7f       	andi	r24, 0xF3	; 243
     eb0:	88 60       	ori	r24, 0x08	; 8
     eb2:	81 bb       	out	0x11, r24	; 17
     eb4:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
     eb8:	88 e1       	ldi	r24, 0x18	; 24
     eba:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
     ebe:	86 e0       	ldi	r24, 0x06	; 6
     ec0:	80 93 9d 00 	sts	0x009D, r24	; 0x80009d <__TEXT_REGION_LENGTH__+0x7e009d>
     ec4:	88 e0       	ldi	r24, 0x08	; 8
     ec6:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
     eca:	08 95       	ret

00000ecc <InitSPI>:
     ecc:	80 e5       	ldi	r24, 0x50	; 80
     ece:	8d b9       	out	0x0d, r24	; 13
     ed0:	81 e0       	ldi	r24, 0x01	; 1
     ed2:	8e b9       	out	0x0e, r24	; 14
     ed4:	08 95       	ret

00000ed6 <TransUart0>:
     ed6:	5d 9b       	sbis	0x0b, 5	; 11
     ed8:	fe cf       	rjmp	.-4      	; 0xed6 <TransUart0>
     eda:	8c b9       	out	0x0c, r24	; 12
     edc:	08 95       	ret

00000ede <SPI_MasterSend>:
// Input : data
// Output : None
//////////////////////////////////////////////////////////////////
void SPI_MasterSend(unsigned char data){
	
	SPDR = data;
     ede:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & 0x80));
     ee0:	77 9b       	sbis	0x0e, 7	; 14
     ee2:	fe cf       	rjmp	.-4      	; 0xee0 <SPI_MasterSend+0x2>
	data = SPDR;
     ee4:	8f b1       	in	r24, 0x0f	; 15
     ee6:	08 95       	ret

00000ee8 <SPI_MasterRecv>:
// Input : None
// Output : data
//////////////////////////////////////////////////////////////////
unsigned char SPI_MasterRecv(void)
{
	SPDR = 0x00;
     ee8:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & 0x80));
     eea:	77 9b       	sbis	0x0e, 7	; 14
     eec:	fe cf       	rjmp	.-4      	; 0xeea <SPI_MasterRecv+0x2>
	return SPDR;
     eee:	8f b1       	in	r24, 0x0f	; 15
     ef0:	08 95       	ret

00000ef2 <__subsf3>:
     ef2:	50 58       	subi	r21, 0x80	; 128

00000ef4 <__addsf3>:
     ef4:	bb 27       	eor	r27, r27
     ef6:	aa 27       	eor	r26, r26
     ef8:	0e d0       	rcall	.+28     	; 0xf16 <__addsf3x>
     efa:	d1 c1       	rjmp	.+930    	; 0x129e <__fp_round>
     efc:	c2 d1       	rcall	.+900    	; 0x1282 <__fp_pscA>
     efe:	30 f0       	brcs	.+12     	; 0xf0c <__addsf3+0x18>
     f00:	c7 d1       	rcall	.+910    	; 0x1290 <__fp_pscB>
     f02:	20 f0       	brcs	.+8      	; 0xf0c <__addsf3+0x18>
     f04:	31 f4       	brne	.+12     	; 0xf12 <__addsf3+0x1e>
     f06:	9f 3f       	cpi	r25, 0xFF	; 255
     f08:	11 f4       	brne	.+4      	; 0xf0e <__addsf3+0x1a>
     f0a:	1e f4       	brtc	.+6      	; 0xf12 <__addsf3+0x1e>
     f0c:	b7 c1       	rjmp	.+878    	; 0x127c <__fp_nan>
     f0e:	0e f4       	brtc	.+2      	; 0xf12 <__addsf3+0x1e>
     f10:	e0 95       	com	r30
     f12:	e7 fb       	bst	r30, 7
     f14:	9f c1       	rjmp	.+830    	; 0x1254 <__fp_inf>

00000f16 <__addsf3x>:
     f16:	e9 2f       	mov	r30, r25
     f18:	d3 d1       	rcall	.+934    	; 0x12c0 <__fp_split3>
     f1a:	80 f3       	brcs	.-32     	; 0xefc <__addsf3+0x8>
     f1c:	ba 17       	cp	r27, r26
     f1e:	62 07       	cpc	r22, r18
     f20:	73 07       	cpc	r23, r19
     f22:	84 07       	cpc	r24, r20
     f24:	95 07       	cpc	r25, r21
     f26:	18 f0       	brcs	.+6      	; 0xf2e <__addsf3x+0x18>
     f28:	71 f4       	brne	.+28     	; 0xf46 <__addsf3x+0x30>
     f2a:	9e f5       	brtc	.+102    	; 0xf92 <__addsf3x+0x7c>
     f2c:	eb c1       	rjmp	.+982    	; 0x1304 <__fp_zero>
     f2e:	0e f4       	brtc	.+2      	; 0xf32 <__addsf3x+0x1c>
     f30:	e0 95       	com	r30
     f32:	0b 2e       	mov	r0, r27
     f34:	ba 2f       	mov	r27, r26
     f36:	a0 2d       	mov	r26, r0
     f38:	0b 01       	movw	r0, r22
     f3a:	b9 01       	movw	r22, r18
     f3c:	90 01       	movw	r18, r0
     f3e:	0c 01       	movw	r0, r24
     f40:	ca 01       	movw	r24, r20
     f42:	a0 01       	movw	r20, r0
     f44:	11 24       	eor	r1, r1
     f46:	ff 27       	eor	r31, r31
     f48:	59 1b       	sub	r21, r25
     f4a:	99 f0       	breq	.+38     	; 0xf72 <__addsf3x+0x5c>
     f4c:	59 3f       	cpi	r21, 0xF9	; 249
     f4e:	50 f4       	brcc	.+20     	; 0xf64 <__addsf3x+0x4e>
     f50:	50 3e       	cpi	r21, 0xE0	; 224
     f52:	68 f1       	brcs	.+90     	; 0xfae <__addsf3x+0x98>
     f54:	1a 16       	cp	r1, r26
     f56:	f0 40       	sbci	r31, 0x00	; 0
     f58:	a2 2f       	mov	r26, r18
     f5a:	23 2f       	mov	r18, r19
     f5c:	34 2f       	mov	r19, r20
     f5e:	44 27       	eor	r20, r20
     f60:	58 5f       	subi	r21, 0xF8	; 248
     f62:	f3 cf       	rjmp	.-26     	; 0xf4a <__addsf3x+0x34>
     f64:	46 95       	lsr	r20
     f66:	37 95       	ror	r19
     f68:	27 95       	ror	r18
     f6a:	a7 95       	ror	r26
     f6c:	f0 40       	sbci	r31, 0x00	; 0
     f6e:	53 95       	inc	r21
     f70:	c9 f7       	brne	.-14     	; 0xf64 <__addsf3x+0x4e>
     f72:	7e f4       	brtc	.+30     	; 0xf92 <__addsf3x+0x7c>
     f74:	1f 16       	cp	r1, r31
     f76:	ba 0b       	sbc	r27, r26
     f78:	62 0b       	sbc	r22, r18
     f7a:	73 0b       	sbc	r23, r19
     f7c:	84 0b       	sbc	r24, r20
     f7e:	ba f0       	brmi	.+46     	; 0xfae <__addsf3x+0x98>
     f80:	91 50       	subi	r25, 0x01	; 1
     f82:	a1 f0       	breq	.+40     	; 0xfac <__addsf3x+0x96>
     f84:	ff 0f       	add	r31, r31
     f86:	bb 1f       	adc	r27, r27
     f88:	66 1f       	adc	r22, r22
     f8a:	77 1f       	adc	r23, r23
     f8c:	88 1f       	adc	r24, r24
     f8e:	c2 f7       	brpl	.-16     	; 0xf80 <__addsf3x+0x6a>
     f90:	0e c0       	rjmp	.+28     	; 0xfae <__addsf3x+0x98>
     f92:	ba 0f       	add	r27, r26
     f94:	62 1f       	adc	r22, r18
     f96:	73 1f       	adc	r23, r19
     f98:	84 1f       	adc	r24, r20
     f9a:	48 f4       	brcc	.+18     	; 0xfae <__addsf3x+0x98>
     f9c:	87 95       	ror	r24
     f9e:	77 95       	ror	r23
     fa0:	67 95       	ror	r22
     fa2:	b7 95       	ror	r27
     fa4:	f7 95       	ror	r31
     fa6:	9e 3f       	cpi	r25, 0xFE	; 254
     fa8:	08 f0       	brcs	.+2      	; 0xfac <__addsf3x+0x96>
     faa:	b3 cf       	rjmp	.-154    	; 0xf12 <__addsf3+0x1e>
     fac:	93 95       	inc	r25
     fae:	88 0f       	add	r24, r24
     fb0:	08 f0       	brcs	.+2      	; 0xfb4 <__addsf3x+0x9e>
     fb2:	99 27       	eor	r25, r25
     fb4:	ee 0f       	add	r30, r30
     fb6:	97 95       	ror	r25
     fb8:	87 95       	ror	r24
     fba:	08 95       	ret

00000fbc <__cmpsf2>:
     fbc:	27 d1       	rcall	.+590    	; 0x120c <__fp_cmp>
     fbe:	08 f4       	brcc	.+2      	; 0xfc2 <__cmpsf2+0x6>
     fc0:	81 e0       	ldi	r24, 0x01	; 1
     fc2:	08 95       	ret

00000fc4 <__divsf3>:
     fc4:	0c d0       	rcall	.+24     	; 0xfde <__divsf3x>
     fc6:	6b c1       	rjmp	.+726    	; 0x129e <__fp_round>
     fc8:	63 d1       	rcall	.+710    	; 0x1290 <__fp_pscB>
     fca:	40 f0       	brcs	.+16     	; 0xfdc <__divsf3+0x18>
     fcc:	5a d1       	rcall	.+692    	; 0x1282 <__fp_pscA>
     fce:	30 f0       	brcs	.+12     	; 0xfdc <__divsf3+0x18>
     fd0:	21 f4       	brne	.+8      	; 0xfda <__divsf3+0x16>
     fd2:	5f 3f       	cpi	r21, 0xFF	; 255
     fd4:	19 f0       	breq	.+6      	; 0xfdc <__divsf3+0x18>
     fd6:	3e c1       	rjmp	.+636    	; 0x1254 <__fp_inf>
     fd8:	51 11       	cpse	r21, r1
     fda:	95 c1       	rjmp	.+810    	; 0x1306 <__fp_szero>
     fdc:	4f c1       	rjmp	.+670    	; 0x127c <__fp_nan>

00000fde <__divsf3x>:
     fde:	70 d1       	rcall	.+736    	; 0x12c0 <__fp_split3>
     fe0:	98 f3       	brcs	.-26     	; 0xfc8 <__divsf3+0x4>

00000fe2 <__divsf3_pse>:
     fe2:	99 23       	and	r25, r25
     fe4:	c9 f3       	breq	.-14     	; 0xfd8 <__divsf3+0x14>
     fe6:	55 23       	and	r21, r21
     fe8:	b1 f3       	breq	.-20     	; 0xfd6 <__divsf3+0x12>
     fea:	95 1b       	sub	r25, r21
     fec:	55 0b       	sbc	r21, r21
     fee:	bb 27       	eor	r27, r27
     ff0:	aa 27       	eor	r26, r26
     ff2:	62 17       	cp	r22, r18
     ff4:	73 07       	cpc	r23, r19
     ff6:	84 07       	cpc	r24, r20
     ff8:	38 f0       	brcs	.+14     	; 0x1008 <__divsf3_pse+0x26>
     ffa:	9f 5f       	subi	r25, 0xFF	; 255
     ffc:	5f 4f       	sbci	r21, 0xFF	; 255
     ffe:	22 0f       	add	r18, r18
    1000:	33 1f       	adc	r19, r19
    1002:	44 1f       	adc	r20, r20
    1004:	aa 1f       	adc	r26, r26
    1006:	a9 f3       	breq	.-22     	; 0xff2 <__divsf3_pse+0x10>
    1008:	33 d0       	rcall	.+102    	; 0x1070 <__divsf3_pse+0x8e>
    100a:	0e 2e       	mov	r0, r30
    100c:	3a f0       	brmi	.+14     	; 0x101c <__divsf3_pse+0x3a>
    100e:	e0 e8       	ldi	r30, 0x80	; 128
    1010:	30 d0       	rcall	.+96     	; 0x1072 <__divsf3_pse+0x90>
    1012:	91 50       	subi	r25, 0x01	; 1
    1014:	50 40       	sbci	r21, 0x00	; 0
    1016:	e6 95       	lsr	r30
    1018:	00 1c       	adc	r0, r0
    101a:	ca f7       	brpl	.-14     	; 0x100e <__divsf3_pse+0x2c>
    101c:	29 d0       	rcall	.+82     	; 0x1070 <__divsf3_pse+0x8e>
    101e:	fe 2f       	mov	r31, r30
    1020:	27 d0       	rcall	.+78     	; 0x1070 <__divsf3_pse+0x8e>
    1022:	66 0f       	add	r22, r22
    1024:	77 1f       	adc	r23, r23
    1026:	88 1f       	adc	r24, r24
    1028:	bb 1f       	adc	r27, r27
    102a:	26 17       	cp	r18, r22
    102c:	37 07       	cpc	r19, r23
    102e:	48 07       	cpc	r20, r24
    1030:	ab 07       	cpc	r26, r27
    1032:	b0 e8       	ldi	r27, 0x80	; 128
    1034:	09 f0       	breq	.+2      	; 0x1038 <__divsf3_pse+0x56>
    1036:	bb 0b       	sbc	r27, r27
    1038:	80 2d       	mov	r24, r0
    103a:	bf 01       	movw	r22, r30
    103c:	ff 27       	eor	r31, r31
    103e:	93 58       	subi	r25, 0x83	; 131
    1040:	5f 4f       	sbci	r21, 0xFF	; 255
    1042:	2a f0       	brmi	.+10     	; 0x104e <__divsf3_pse+0x6c>
    1044:	9e 3f       	cpi	r25, 0xFE	; 254
    1046:	51 05       	cpc	r21, r1
    1048:	68 f0       	brcs	.+26     	; 0x1064 <__divsf3_pse+0x82>
    104a:	04 c1       	rjmp	.+520    	; 0x1254 <__fp_inf>
    104c:	5c c1       	rjmp	.+696    	; 0x1306 <__fp_szero>
    104e:	5f 3f       	cpi	r21, 0xFF	; 255
    1050:	ec f3       	brlt	.-6      	; 0x104c <__divsf3_pse+0x6a>
    1052:	98 3e       	cpi	r25, 0xE8	; 232
    1054:	dc f3       	brlt	.-10     	; 0x104c <__divsf3_pse+0x6a>
    1056:	86 95       	lsr	r24
    1058:	77 95       	ror	r23
    105a:	67 95       	ror	r22
    105c:	b7 95       	ror	r27
    105e:	f7 95       	ror	r31
    1060:	9f 5f       	subi	r25, 0xFF	; 255
    1062:	c9 f7       	brne	.-14     	; 0x1056 <__divsf3_pse+0x74>
    1064:	88 0f       	add	r24, r24
    1066:	91 1d       	adc	r25, r1
    1068:	96 95       	lsr	r25
    106a:	87 95       	ror	r24
    106c:	97 f9       	bld	r25, 7
    106e:	08 95       	ret
    1070:	e1 e0       	ldi	r30, 0x01	; 1
    1072:	66 0f       	add	r22, r22
    1074:	77 1f       	adc	r23, r23
    1076:	88 1f       	adc	r24, r24
    1078:	bb 1f       	adc	r27, r27
    107a:	62 17       	cp	r22, r18
    107c:	73 07       	cpc	r23, r19
    107e:	84 07       	cpc	r24, r20
    1080:	ba 07       	cpc	r27, r26
    1082:	20 f0       	brcs	.+8      	; 0x108c <__divsf3_pse+0xaa>
    1084:	62 1b       	sub	r22, r18
    1086:	73 0b       	sbc	r23, r19
    1088:	84 0b       	sbc	r24, r20
    108a:	ba 0b       	sbc	r27, r26
    108c:	ee 1f       	adc	r30, r30
    108e:	88 f7       	brcc	.-30     	; 0x1072 <__divsf3_pse+0x90>
    1090:	e0 95       	com	r30
    1092:	08 95       	ret

00001094 <__fixsfsi>:
    1094:	04 d0       	rcall	.+8      	; 0x109e <__fixunssfsi>
    1096:	68 94       	set
    1098:	b1 11       	cpse	r27, r1
    109a:	35 c1       	rjmp	.+618    	; 0x1306 <__fp_szero>
    109c:	08 95       	ret

0000109e <__fixunssfsi>:
    109e:	18 d1       	rcall	.+560    	; 0x12d0 <__fp_splitA>
    10a0:	88 f0       	brcs	.+34     	; 0x10c4 <__fixunssfsi+0x26>
    10a2:	9f 57       	subi	r25, 0x7F	; 127
    10a4:	90 f0       	brcs	.+36     	; 0x10ca <__fixunssfsi+0x2c>
    10a6:	b9 2f       	mov	r27, r25
    10a8:	99 27       	eor	r25, r25
    10aa:	b7 51       	subi	r27, 0x17	; 23
    10ac:	a0 f0       	brcs	.+40     	; 0x10d6 <__fixunssfsi+0x38>
    10ae:	d1 f0       	breq	.+52     	; 0x10e4 <__fixunssfsi+0x46>
    10b0:	66 0f       	add	r22, r22
    10b2:	77 1f       	adc	r23, r23
    10b4:	88 1f       	adc	r24, r24
    10b6:	99 1f       	adc	r25, r25
    10b8:	1a f0       	brmi	.+6      	; 0x10c0 <__fixunssfsi+0x22>
    10ba:	ba 95       	dec	r27
    10bc:	c9 f7       	brne	.-14     	; 0x10b0 <__fixunssfsi+0x12>
    10be:	12 c0       	rjmp	.+36     	; 0x10e4 <__fixunssfsi+0x46>
    10c0:	b1 30       	cpi	r27, 0x01	; 1
    10c2:	81 f0       	breq	.+32     	; 0x10e4 <__fixunssfsi+0x46>
    10c4:	1f d1       	rcall	.+574    	; 0x1304 <__fp_zero>
    10c6:	b1 e0       	ldi	r27, 0x01	; 1
    10c8:	08 95       	ret
    10ca:	1c c1       	rjmp	.+568    	; 0x1304 <__fp_zero>
    10cc:	67 2f       	mov	r22, r23
    10ce:	78 2f       	mov	r23, r24
    10d0:	88 27       	eor	r24, r24
    10d2:	b8 5f       	subi	r27, 0xF8	; 248
    10d4:	39 f0       	breq	.+14     	; 0x10e4 <__fixunssfsi+0x46>
    10d6:	b9 3f       	cpi	r27, 0xF9	; 249
    10d8:	cc f3       	brlt	.-14     	; 0x10cc <__fixunssfsi+0x2e>
    10da:	86 95       	lsr	r24
    10dc:	77 95       	ror	r23
    10de:	67 95       	ror	r22
    10e0:	b3 95       	inc	r27
    10e2:	d9 f7       	brne	.-10     	; 0x10da <__fixunssfsi+0x3c>
    10e4:	3e f4       	brtc	.+14     	; 0x10f4 <__fixunssfsi+0x56>
    10e6:	90 95       	com	r25
    10e8:	80 95       	com	r24
    10ea:	70 95       	com	r23
    10ec:	61 95       	neg	r22
    10ee:	7f 4f       	sbci	r23, 0xFF	; 255
    10f0:	8f 4f       	sbci	r24, 0xFF	; 255
    10f2:	9f 4f       	sbci	r25, 0xFF	; 255
    10f4:	08 95       	ret

000010f6 <__floatunsisf>:
    10f6:	e8 94       	clt
    10f8:	09 c0       	rjmp	.+18     	; 0x110c <__stack+0xd>

000010fa <__floatsisf>:
    10fa:	97 fb       	bst	r25, 7
    10fc:	3e f4       	brtc	.+14     	; 0x110c <__stack+0xd>
    10fe:	90 95       	com	r25
    1100:	80 95       	com	r24
    1102:	70 95       	com	r23
    1104:	61 95       	neg	r22
    1106:	7f 4f       	sbci	r23, 0xFF	; 255
    1108:	8f 4f       	sbci	r24, 0xFF	; 255
    110a:	9f 4f       	sbci	r25, 0xFF	; 255
    110c:	99 23       	and	r25, r25
    110e:	a9 f0       	breq	.+42     	; 0x113a <__stack+0x3b>
    1110:	f9 2f       	mov	r31, r25
    1112:	96 e9       	ldi	r25, 0x96	; 150
    1114:	bb 27       	eor	r27, r27
    1116:	93 95       	inc	r25
    1118:	f6 95       	lsr	r31
    111a:	87 95       	ror	r24
    111c:	77 95       	ror	r23
    111e:	67 95       	ror	r22
    1120:	b7 95       	ror	r27
    1122:	f1 11       	cpse	r31, r1
    1124:	f8 cf       	rjmp	.-16     	; 0x1116 <__stack+0x17>
    1126:	fa f4       	brpl	.+62     	; 0x1166 <__stack+0x67>
    1128:	bb 0f       	add	r27, r27
    112a:	11 f4       	brne	.+4      	; 0x1130 <__stack+0x31>
    112c:	60 ff       	sbrs	r22, 0
    112e:	1b c0       	rjmp	.+54     	; 0x1166 <__stack+0x67>
    1130:	6f 5f       	subi	r22, 0xFF	; 255
    1132:	7f 4f       	sbci	r23, 0xFF	; 255
    1134:	8f 4f       	sbci	r24, 0xFF	; 255
    1136:	9f 4f       	sbci	r25, 0xFF	; 255
    1138:	16 c0       	rjmp	.+44     	; 0x1166 <__stack+0x67>
    113a:	88 23       	and	r24, r24
    113c:	11 f0       	breq	.+4      	; 0x1142 <__stack+0x43>
    113e:	96 e9       	ldi	r25, 0x96	; 150
    1140:	11 c0       	rjmp	.+34     	; 0x1164 <__stack+0x65>
    1142:	77 23       	and	r23, r23
    1144:	21 f0       	breq	.+8      	; 0x114e <__stack+0x4f>
    1146:	9e e8       	ldi	r25, 0x8E	; 142
    1148:	87 2f       	mov	r24, r23
    114a:	76 2f       	mov	r23, r22
    114c:	05 c0       	rjmp	.+10     	; 0x1158 <__stack+0x59>
    114e:	66 23       	and	r22, r22
    1150:	71 f0       	breq	.+28     	; 0x116e <__stack+0x6f>
    1152:	96 e8       	ldi	r25, 0x86	; 134
    1154:	86 2f       	mov	r24, r22
    1156:	70 e0       	ldi	r23, 0x00	; 0
    1158:	60 e0       	ldi	r22, 0x00	; 0
    115a:	2a f0       	brmi	.+10     	; 0x1166 <__stack+0x67>
    115c:	9a 95       	dec	r25
    115e:	66 0f       	add	r22, r22
    1160:	77 1f       	adc	r23, r23
    1162:	88 1f       	adc	r24, r24
    1164:	da f7       	brpl	.-10     	; 0x115c <__stack+0x5d>
    1166:	88 0f       	add	r24, r24
    1168:	96 95       	lsr	r25
    116a:	87 95       	ror	r24
    116c:	97 f9       	bld	r25, 7
    116e:	08 95       	ret
    1170:	88 d0       	rcall	.+272    	; 0x1282 <__fp_pscA>
    1172:	18 f0       	brcs	.+6      	; 0x117a <__stack+0x7b>
    1174:	11 f0       	breq	.+4      	; 0x117a <__stack+0x7b>
    1176:	8c d0       	rcall	.+280    	; 0x1290 <__fp_pscB>
    1178:	38 f4       	brcc	.+14     	; 0x1188 <fmod+0xa>
    117a:	80 c0       	rjmp	.+256    	; 0x127c <__fp_nan>
    117c:	c4 c0       	rjmp	.+392    	; 0x1306 <__fp_szero>

0000117e <fmod>:
    117e:	e9 2f       	mov	r30, r25
    1180:	9f d0       	rcall	.+318    	; 0x12c0 <__fp_split3>
    1182:	b0 f3       	brcs	.-20     	; 0x1170 <__stack+0x71>
    1184:	55 23       	and	r21, r21
    1186:	c9 f3       	breq	.-14     	; 0x117a <__stack+0x7b>
    1188:	e7 fb       	bst	r30, 7
    118a:	62 17       	cp	r22, r18
    118c:	73 07       	cpc	r23, r19
    118e:	84 07       	cpc	r24, r20
    1190:	95 07       	cpc	r25, r21
    1192:	a8 f1       	brcs	.+106    	; 0x11fe <fmod+0x80>
    1194:	99 f3       	breq	.-26     	; 0x117c <__stack+0x7d>
    1196:	e9 2f       	mov	r30, r25
    1198:	ff 27       	eor	r31, r31
    119a:	88 23       	and	r24, r24
    119c:	2a f0       	brmi	.+10     	; 0x11a8 <fmod+0x2a>
    119e:	31 97       	sbiw	r30, 0x01	; 1
    11a0:	66 0f       	add	r22, r22
    11a2:	77 1f       	adc	r23, r23
    11a4:	88 1f       	adc	r24, r24
    11a6:	da f7       	brpl	.-10     	; 0x119e <fmod+0x20>
    11a8:	95 2f       	mov	r25, r21
    11aa:	55 27       	eor	r21, r21
    11ac:	44 23       	and	r20, r20
    11ae:	32 f0       	brmi	.+12     	; 0x11bc <fmod+0x3e>
    11b0:	91 50       	subi	r25, 0x01	; 1
    11b2:	50 40       	sbci	r21, 0x00	; 0
    11b4:	22 0f       	add	r18, r18
    11b6:	33 1f       	adc	r19, r19
    11b8:	44 1f       	adc	r20, r20
    11ba:	d2 f7       	brpl	.-12     	; 0x11b0 <fmod+0x32>
    11bc:	bb 27       	eor	r27, r27
    11be:	e9 1b       	sub	r30, r25
    11c0:	f5 0b       	sbc	r31, r21
    11c2:	62 1b       	sub	r22, r18
    11c4:	73 0b       	sbc	r23, r19
    11c6:	84 0b       	sbc	r24, r20
    11c8:	b1 09       	sbc	r27, r1
    11ca:	c1 f2       	breq	.-80     	; 0x117c <__stack+0x7d>
    11cc:	22 f4       	brpl	.+8      	; 0x11d6 <fmod+0x58>
    11ce:	62 0f       	add	r22, r18
    11d0:	73 1f       	adc	r23, r19
    11d2:	84 1f       	adc	r24, r20
    11d4:	b1 1d       	adc	r27, r1
    11d6:	31 97       	sbiw	r30, 0x01	; 1
    11d8:	2a f0       	brmi	.+10     	; 0x11e4 <fmod+0x66>
    11da:	66 0f       	add	r22, r22
    11dc:	77 1f       	adc	r23, r23
    11de:	88 1f       	adc	r24, r24
    11e0:	bb 1f       	adc	r27, r27
    11e2:	ef cf       	rjmp	.-34     	; 0x11c2 <fmod+0x44>
    11e4:	91 50       	subi	r25, 0x01	; 1
    11e6:	50 40       	sbci	r21, 0x00	; 0
    11e8:	5a f0       	brmi	.+22     	; 0x1200 <fmod+0x82>
    11ea:	41 f0       	breq	.+16     	; 0x11fc <fmod+0x7e>
    11ec:	88 23       	and	r24, r24
    11ee:	32 f0       	brmi	.+12     	; 0x11fc <fmod+0x7e>
    11f0:	66 0f       	add	r22, r22
    11f2:	77 1f       	adc	r23, r23
    11f4:	88 1f       	adc	r24, r24
    11f6:	91 50       	subi	r25, 0x01	; 1
    11f8:	50 40       	sbci	r21, 0x00	; 0
    11fa:	c1 f7       	brne	.-16     	; 0x11ec <fmod+0x6e>
    11fc:	93 95       	inc	r25
    11fe:	30 c0       	rjmp	.+96     	; 0x1260 <__fp_mpack>
    1200:	86 95       	lsr	r24
    1202:	77 95       	ror	r23
    1204:	67 95       	ror	r22
    1206:	9f 5f       	subi	r25, 0xFF	; 255
    1208:	d9 f7       	brne	.-10     	; 0x1200 <fmod+0x82>
    120a:	f8 cf       	rjmp	.-16     	; 0x11fc <fmod+0x7e>

0000120c <__fp_cmp>:
    120c:	99 0f       	add	r25, r25
    120e:	00 08       	sbc	r0, r0
    1210:	55 0f       	add	r21, r21
    1212:	aa 0b       	sbc	r26, r26
    1214:	e0 e8       	ldi	r30, 0x80	; 128
    1216:	fe ef       	ldi	r31, 0xFE	; 254
    1218:	16 16       	cp	r1, r22
    121a:	17 06       	cpc	r1, r23
    121c:	e8 07       	cpc	r30, r24
    121e:	f9 07       	cpc	r31, r25
    1220:	c0 f0       	brcs	.+48     	; 0x1252 <__fp_cmp+0x46>
    1222:	12 16       	cp	r1, r18
    1224:	13 06       	cpc	r1, r19
    1226:	e4 07       	cpc	r30, r20
    1228:	f5 07       	cpc	r31, r21
    122a:	98 f0       	brcs	.+38     	; 0x1252 <__fp_cmp+0x46>
    122c:	62 1b       	sub	r22, r18
    122e:	73 0b       	sbc	r23, r19
    1230:	84 0b       	sbc	r24, r20
    1232:	95 0b       	sbc	r25, r21
    1234:	39 f4       	brne	.+14     	; 0x1244 <__fp_cmp+0x38>
    1236:	0a 26       	eor	r0, r26
    1238:	61 f0       	breq	.+24     	; 0x1252 <__fp_cmp+0x46>
    123a:	23 2b       	or	r18, r19
    123c:	24 2b       	or	r18, r20
    123e:	25 2b       	or	r18, r21
    1240:	21 f4       	brne	.+8      	; 0x124a <__fp_cmp+0x3e>
    1242:	08 95       	ret
    1244:	0a 26       	eor	r0, r26
    1246:	09 f4       	brne	.+2      	; 0x124a <__fp_cmp+0x3e>
    1248:	a1 40       	sbci	r26, 0x01	; 1
    124a:	a6 95       	lsr	r26
    124c:	8f ef       	ldi	r24, 0xFF	; 255
    124e:	81 1d       	adc	r24, r1
    1250:	81 1d       	adc	r24, r1
    1252:	08 95       	ret

00001254 <__fp_inf>:
    1254:	97 f9       	bld	r25, 7
    1256:	9f 67       	ori	r25, 0x7F	; 127
    1258:	80 e8       	ldi	r24, 0x80	; 128
    125a:	70 e0       	ldi	r23, 0x00	; 0
    125c:	60 e0       	ldi	r22, 0x00	; 0
    125e:	08 95       	ret

00001260 <__fp_mpack>:
    1260:	9f 3f       	cpi	r25, 0xFF	; 255
    1262:	31 f0       	breq	.+12     	; 0x1270 <__fp_mpack_finite+0xc>

00001264 <__fp_mpack_finite>:
    1264:	91 50       	subi	r25, 0x01	; 1
    1266:	20 f4       	brcc	.+8      	; 0x1270 <__fp_mpack_finite+0xc>
    1268:	87 95       	ror	r24
    126a:	77 95       	ror	r23
    126c:	67 95       	ror	r22
    126e:	b7 95       	ror	r27
    1270:	88 0f       	add	r24, r24
    1272:	91 1d       	adc	r25, r1
    1274:	96 95       	lsr	r25
    1276:	87 95       	ror	r24
    1278:	97 f9       	bld	r25, 7
    127a:	08 95       	ret

0000127c <__fp_nan>:
    127c:	9f ef       	ldi	r25, 0xFF	; 255
    127e:	80 ec       	ldi	r24, 0xC0	; 192
    1280:	08 95       	ret

00001282 <__fp_pscA>:
    1282:	00 24       	eor	r0, r0
    1284:	0a 94       	dec	r0
    1286:	16 16       	cp	r1, r22
    1288:	17 06       	cpc	r1, r23
    128a:	18 06       	cpc	r1, r24
    128c:	09 06       	cpc	r0, r25
    128e:	08 95       	ret

00001290 <__fp_pscB>:
    1290:	00 24       	eor	r0, r0
    1292:	0a 94       	dec	r0
    1294:	12 16       	cp	r1, r18
    1296:	13 06       	cpc	r1, r19
    1298:	14 06       	cpc	r1, r20
    129a:	05 06       	cpc	r0, r21
    129c:	08 95       	ret

0000129e <__fp_round>:
    129e:	09 2e       	mov	r0, r25
    12a0:	03 94       	inc	r0
    12a2:	00 0c       	add	r0, r0
    12a4:	11 f4       	brne	.+4      	; 0x12aa <__fp_round+0xc>
    12a6:	88 23       	and	r24, r24
    12a8:	52 f0       	brmi	.+20     	; 0x12be <__fp_round+0x20>
    12aa:	bb 0f       	add	r27, r27
    12ac:	40 f4       	brcc	.+16     	; 0x12be <__fp_round+0x20>
    12ae:	bf 2b       	or	r27, r31
    12b0:	11 f4       	brne	.+4      	; 0x12b6 <__fp_round+0x18>
    12b2:	60 ff       	sbrs	r22, 0
    12b4:	04 c0       	rjmp	.+8      	; 0x12be <__fp_round+0x20>
    12b6:	6f 5f       	subi	r22, 0xFF	; 255
    12b8:	7f 4f       	sbci	r23, 0xFF	; 255
    12ba:	8f 4f       	sbci	r24, 0xFF	; 255
    12bc:	9f 4f       	sbci	r25, 0xFF	; 255
    12be:	08 95       	ret

000012c0 <__fp_split3>:
    12c0:	57 fd       	sbrc	r21, 7
    12c2:	90 58       	subi	r25, 0x80	; 128
    12c4:	44 0f       	add	r20, r20
    12c6:	55 1f       	adc	r21, r21
    12c8:	59 f0       	breq	.+22     	; 0x12e0 <__fp_splitA+0x10>
    12ca:	5f 3f       	cpi	r21, 0xFF	; 255
    12cc:	71 f0       	breq	.+28     	; 0x12ea <__fp_splitA+0x1a>
    12ce:	47 95       	ror	r20

000012d0 <__fp_splitA>:
    12d0:	88 0f       	add	r24, r24
    12d2:	97 fb       	bst	r25, 7
    12d4:	99 1f       	adc	r25, r25
    12d6:	61 f0       	breq	.+24     	; 0x12f0 <__fp_splitA+0x20>
    12d8:	9f 3f       	cpi	r25, 0xFF	; 255
    12da:	79 f0       	breq	.+30     	; 0x12fa <__fp_splitA+0x2a>
    12dc:	87 95       	ror	r24
    12de:	08 95       	ret
    12e0:	12 16       	cp	r1, r18
    12e2:	13 06       	cpc	r1, r19
    12e4:	14 06       	cpc	r1, r20
    12e6:	55 1f       	adc	r21, r21
    12e8:	f2 cf       	rjmp	.-28     	; 0x12ce <__fp_split3+0xe>
    12ea:	46 95       	lsr	r20
    12ec:	f1 df       	rcall	.-30     	; 0x12d0 <__fp_splitA>
    12ee:	08 c0       	rjmp	.+16     	; 0x1300 <__fp_splitA+0x30>
    12f0:	16 16       	cp	r1, r22
    12f2:	17 06       	cpc	r1, r23
    12f4:	18 06       	cpc	r1, r24
    12f6:	99 1f       	adc	r25, r25
    12f8:	f1 cf       	rjmp	.-30     	; 0x12dc <__fp_splitA+0xc>
    12fa:	86 95       	lsr	r24
    12fc:	71 05       	cpc	r23, r1
    12fe:	61 05       	cpc	r22, r1
    1300:	08 94       	sec
    1302:	08 95       	ret

00001304 <__fp_zero>:
    1304:	e8 94       	clt

00001306 <__fp_szero>:
    1306:	bb 27       	eor	r27, r27
    1308:	66 27       	eor	r22, r22
    130a:	77 27       	eor	r23, r23
    130c:	cb 01       	movw	r24, r22
    130e:	97 f9       	bld	r25, 7
    1310:	08 95       	ret

00001312 <__gesf2>:
    1312:	7c df       	rcall	.-264    	; 0x120c <__fp_cmp>
    1314:	08 f4       	brcc	.+2      	; 0x1318 <__gesf2+0x6>
    1316:	8f ef       	ldi	r24, 0xFF	; 255
    1318:	08 95       	ret

0000131a <__mulsf3>:
    131a:	0b d0       	rcall	.+22     	; 0x1332 <__mulsf3x>
    131c:	c0 cf       	rjmp	.-128    	; 0x129e <__fp_round>
    131e:	b1 df       	rcall	.-158    	; 0x1282 <__fp_pscA>
    1320:	28 f0       	brcs	.+10     	; 0x132c <__mulsf3+0x12>
    1322:	b6 df       	rcall	.-148    	; 0x1290 <__fp_pscB>
    1324:	18 f0       	brcs	.+6      	; 0x132c <__mulsf3+0x12>
    1326:	95 23       	and	r25, r21
    1328:	09 f0       	breq	.+2      	; 0x132c <__mulsf3+0x12>
    132a:	94 cf       	rjmp	.-216    	; 0x1254 <__fp_inf>
    132c:	a7 cf       	rjmp	.-178    	; 0x127c <__fp_nan>
    132e:	11 24       	eor	r1, r1
    1330:	ea cf       	rjmp	.-44     	; 0x1306 <__fp_szero>

00001332 <__mulsf3x>:
    1332:	c6 df       	rcall	.-116    	; 0x12c0 <__fp_split3>
    1334:	a0 f3       	brcs	.-24     	; 0x131e <__mulsf3+0x4>

00001336 <__mulsf3_pse>:
    1336:	95 9f       	mul	r25, r21
    1338:	d1 f3       	breq	.-12     	; 0x132e <__mulsf3+0x14>
    133a:	95 0f       	add	r25, r21
    133c:	50 e0       	ldi	r21, 0x00	; 0
    133e:	55 1f       	adc	r21, r21
    1340:	62 9f       	mul	r22, r18
    1342:	f0 01       	movw	r30, r0
    1344:	72 9f       	mul	r23, r18
    1346:	bb 27       	eor	r27, r27
    1348:	f0 0d       	add	r31, r0
    134a:	b1 1d       	adc	r27, r1
    134c:	63 9f       	mul	r22, r19
    134e:	aa 27       	eor	r26, r26
    1350:	f0 0d       	add	r31, r0
    1352:	b1 1d       	adc	r27, r1
    1354:	aa 1f       	adc	r26, r26
    1356:	64 9f       	mul	r22, r20
    1358:	66 27       	eor	r22, r22
    135a:	b0 0d       	add	r27, r0
    135c:	a1 1d       	adc	r26, r1
    135e:	66 1f       	adc	r22, r22
    1360:	82 9f       	mul	r24, r18
    1362:	22 27       	eor	r18, r18
    1364:	b0 0d       	add	r27, r0
    1366:	a1 1d       	adc	r26, r1
    1368:	62 1f       	adc	r22, r18
    136a:	73 9f       	mul	r23, r19
    136c:	b0 0d       	add	r27, r0
    136e:	a1 1d       	adc	r26, r1
    1370:	62 1f       	adc	r22, r18
    1372:	83 9f       	mul	r24, r19
    1374:	a0 0d       	add	r26, r0
    1376:	61 1d       	adc	r22, r1
    1378:	22 1f       	adc	r18, r18
    137a:	74 9f       	mul	r23, r20
    137c:	33 27       	eor	r19, r19
    137e:	a0 0d       	add	r26, r0
    1380:	61 1d       	adc	r22, r1
    1382:	23 1f       	adc	r18, r19
    1384:	84 9f       	mul	r24, r20
    1386:	60 0d       	add	r22, r0
    1388:	21 1d       	adc	r18, r1
    138a:	82 2f       	mov	r24, r18
    138c:	76 2f       	mov	r23, r22
    138e:	6a 2f       	mov	r22, r26
    1390:	11 24       	eor	r1, r1
    1392:	9f 57       	subi	r25, 0x7F	; 127
    1394:	50 40       	sbci	r21, 0x00	; 0
    1396:	8a f0       	brmi	.+34     	; 0x13ba <__mulsf3_pse+0x84>
    1398:	e1 f0       	breq	.+56     	; 0x13d2 <__mulsf3_pse+0x9c>
    139a:	88 23       	and	r24, r24
    139c:	4a f0       	brmi	.+18     	; 0x13b0 <__mulsf3_pse+0x7a>
    139e:	ee 0f       	add	r30, r30
    13a0:	ff 1f       	adc	r31, r31
    13a2:	bb 1f       	adc	r27, r27
    13a4:	66 1f       	adc	r22, r22
    13a6:	77 1f       	adc	r23, r23
    13a8:	88 1f       	adc	r24, r24
    13aa:	91 50       	subi	r25, 0x01	; 1
    13ac:	50 40       	sbci	r21, 0x00	; 0
    13ae:	a9 f7       	brne	.-22     	; 0x139a <__mulsf3_pse+0x64>
    13b0:	9e 3f       	cpi	r25, 0xFE	; 254
    13b2:	51 05       	cpc	r21, r1
    13b4:	70 f0       	brcs	.+28     	; 0x13d2 <__mulsf3_pse+0x9c>
    13b6:	4e cf       	rjmp	.-356    	; 0x1254 <__fp_inf>
    13b8:	a6 cf       	rjmp	.-180    	; 0x1306 <__fp_szero>
    13ba:	5f 3f       	cpi	r21, 0xFF	; 255
    13bc:	ec f3       	brlt	.-6      	; 0x13b8 <__mulsf3_pse+0x82>
    13be:	98 3e       	cpi	r25, 0xE8	; 232
    13c0:	dc f3       	brlt	.-10     	; 0x13b8 <__mulsf3_pse+0x82>
    13c2:	86 95       	lsr	r24
    13c4:	77 95       	ror	r23
    13c6:	67 95       	ror	r22
    13c8:	b7 95       	ror	r27
    13ca:	f7 95       	ror	r31
    13cc:	e7 95       	ror	r30
    13ce:	9f 5f       	subi	r25, 0xFF	; 255
    13d0:	c1 f7       	brne	.-16     	; 0x13c2 <__mulsf3_pse+0x8c>
    13d2:	fe 2b       	or	r31, r30
    13d4:	88 0f       	add	r24, r24
    13d6:	91 1d       	adc	r25, r1
    13d8:	96 95       	lsr	r25
    13da:	87 95       	ror	r24
    13dc:	97 f9       	bld	r25, 7
    13de:	08 95       	ret

000013e0 <_exit>:
    13e0:	f8 94       	cli

000013e2 <__stop_program>:
    13e2:	ff cf       	rjmp	.-2      	; 0x13e2 <__stop_program>
